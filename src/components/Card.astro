---
export interface Props {
  title: string;
  picture: string;
  subtitle?: string;
  href: string;
  date?: string | number;
  description?: string;
  tags: string[];
}

const { title, subtitle, href, picture, date, description, tags } = Astro.props;
import tagsMap, { Tag } from '../projects/tags';
let tagData: Tag[] = [];

// If tags are supplied, get their title and url from tagsmap
if (tags) {
  tagData = tags.map((t) => {
    return t in tagsMap
      ? tagsMap[t as keyof typeof tagsMap]
      : { title: '', href: '' };
  });
}

// TODO: on hover hide tags and display p
---

<div class="card">
  <a href={href}>
    <div class="picture">
      <img src={`/assets/${picture}`} />
    </div>
    <div class={`card-body ${description ? 'with-description' : ''}`}>
      <div class="body-title">
        <h4>{title}</h4>
        <span>{date}</span>
      </div>
      <span>{subtitle ?? ''}</span>
      {description && <p>{description}</p>}
    </div>
  </a>

  <div class={`tags`}>
    {
      tagData &&
        tagData.map(
          ({ title, href }) =>
            title && (
              <a target="_blank" href={href} class="tag">
                {title}
              </a>
            ),
        )
    }
  </div>
</div>

<style lang="scss" define:vars={{ length: '10px' }}>
  .body-title {
    display: flex;
    justify-content: space-between;
  }

  .card {
    position: relative;
    width: 100%;
    background: var(--color-surface-4);
    display: flex;
    flex-direction: column;
    border-radius: var(--border-radius);
    transition: bottom 150ms cubic-bezier(0.17, 0.67, 0.66, 0.97);

    &:hover {
      bottom: 0.5rem;
    }

    & a {
      text-decoration: none;
      color: inherit;
    }
  }

  .card-body {
    padding: 1rem 1rem 0rem 1rem;
    background: var(--color-surface-4);
  }

  .card:hover .with-description p {
    display: block;
  }

  .picture {
    max-height: 60%;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--border-radius) var(--border-radius) 0 0;
  }

  img {
    // for some reason the image had a tiny margin on the side
    width: 102%;
    height: auto;
    object-fit: cover;
  }

  .card h4 {
    font-size: var(--text-md);
  }

  span {
    display: inline-block;
    font-size: var(--text-xs);
    font-weight: 400;
    color: var(--color-text-sub);
    letter-spacing: 2px;
    margin-bottom: 1rem;
  }

  p {
    font-weight: 400;
    font-size: var(--text-xs);
    opacity: 0.7;
    padding-bottom: 0.75rem;
    max-height: 100px;
    overflow: overlay;
  }

  p::-webkit-scrollbar {
    position: absolute;
    opacity: 0;
    width: 0em;
  }

  .tags {
    display: flex;
    position: relative;
    gap: 0.5rem;
    flex-wrap: wrap;
    border-radius: 0 0 var(--border-radius) var(--border-radius);
    background: var(--color-surface-4);
    padding: 1rem;

    &::before {
      content: '';
      border-top: 1px solid var(--color-accent-4);
      height: 0px;
      position: absolute;
      width: calc(100% - 2rem);
      left: 50%;
      top: 0;
      transform: translateX(-50%);
    }
  }

  .tag {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: fit-content;
    font-size: var(--text-xs);
    background: var(--color-surface-4);
    color: var(--color-text-sub);
    padding: 0.25rem 0.5rem;
    border-radius: 0.5rem;
    text-transform: uppercase;
  }

  // loop through tags changing color
  // because custom properties only work in property declarations
  // we need to specify a max number of elements
  // $n: 4;
  // @for $i from 0 to $n {
  //   $hue: 229;
  //   $saturation: 100;
  //   $lightness: 60;
  //   $alpha: 1;

  //   .tags a:nth-child(#{$i + 1}) {
  //     background: hsla($hue, ($saturation + ($i * calc(1%))), ($lightness - ($i * calc(1% * (100 / 10)))), $alpha);
  //   }
  // }
</style>
