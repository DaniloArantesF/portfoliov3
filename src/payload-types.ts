/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    media: Media;
    pages: Page;
    projects: Project;
    'reusable-content': ReusableContent;
    tags: Tag;
    users: User;
    forms: Form;
    'form-submissions': FormSubmission;
    redirects: Redirect;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    settings: Setting;
    'brand-info': BrandInfo;
    menu: Menu;
    footer: Footer;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  fullTitle?: string | null;
  layout?:
    | (
        | {
            ctaFields: {
              richText: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format:
                    | 'left'
                    | 'start'
                    | 'center'
                    | 'right'
                    | 'end'
                    | 'justify'
                    | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              links?:
                | {
                    link: {
                      type?: ('reference' | 'custom' | 'section') | null;
                      newTab?: boolean | null;
                      reference?:
                        | ({
                            relationTo: 'pages';
                            value: string | Page;
                          } | null)
                        | ({
                            relationTo: 'projects';
                            value: string | Project;
                          } | null);
                      url?: string | null;
                      section?: string | null;
                      label: string;
                    };
                    id?: string | null;
                  }[]
                | null;
            };
            sectionId?: string | null;
            backgroundColor?:
              | ('background' | 'background-1' | 'background-2' | 'transparent')
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'cta';
          }
        | {
            title?: string | null;
            cardGridFields?: {
              richText?: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format:
                    | 'left'
                    | 'start'
                    | 'center'
                    | 'right'
                    | 'end'
                    | 'justify'
                    | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              } | null;
              links?:
                | {
                    link: {
                      type?: ('reference' | 'custom' | 'section') | null;
                      newTab?: boolean | null;
                      reference?:
                        | ({
                            relationTo: 'pages';
                            value: string | Page;
                          } | null)
                        | ({
                            relationTo: 'projects';
                            value: string | Project;
                          } | null);
                      url?: string | null;
                      section?: string | null;
                      label: string;
                    };
                    id?: string | null;
                  }[]
                | null;
              cards?:
                | {
                    title: string;
                    image?: string | Media | null;
                    description?: string | null;
                    enableLink?: boolean | null;
                    link?: {
                      type?: ('reference' | 'custom' | 'section') | null;
                      newTab?: boolean | null;
                      reference?:
                        | ({
                            relationTo: 'pages';
                            value: string | Page;
                          } | null)
                        | ({
                            relationTo: 'projects';
                            value: string | Project;
                          } | null);
                      url?: string | null;
                      section?: string | null;
                    };
                    id?: string | null;
                  }[]
                | null;
            };
            sectionId?: string | null;
            backgroundColor?:
              | ('background' | 'background-1' | 'background-2' | 'transparent')
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'cardGrid';
          }
        | {
            headline?: string | null;
            content?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format:
                  | 'left'
                  | 'start'
                  | 'center'
                  | 'right'
                  | 'end'
                  | 'justify'
                  | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            sectionId?: string | null;
            backgroundColor?:
              | ('background' | 'background-1' | 'background-2' | 'transparent')
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'content';
          }
        | {
            formFields: {
              container?: boolean | null;
              richText: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format:
                    | 'left'
                    | 'start'
                    | 'center'
                    | 'right'
                    | 'end'
                    | 'justify'
                    | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              form: string | Form;
            };
            sectionId?: string | null;
            backgroundColor?:
              | ('background' | 'background-1' | 'background-2' | 'transparent')
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
        | {
            headline?: string | null;
            info?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format:
                  | 'left'
                  | 'start'
                  | 'center'
                  | 'right'
                  | 'end'
                  | 'justify'
                  | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            buttons?:
              | {
                  link: {
                    type?: ('reference' | 'custom' | 'section') | null;
                    newTab?: boolean | null;
                    reference?:
                      | ({
                          relationTo: 'pages';
                          value: string | Page;
                        } | null)
                      | ({
                          relationTo: 'projects';
                          value: string | Project;
                        } | null);
                    url?: string | null;
                    section?: string | null;
                    label: string;
                  };
                  id?: string | null;
                }[]
              | null;
            customBlock?: (string | null) | ReusableContent;
            navLinkSectionId?: string | null;
            navLinkLabel?: string | null;
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | {
            mediaContentFields: {
              alignment?: ('contentMedia' | 'mediaContent') | null;
              container?: boolean | null;
              richText: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format:
                    | 'left'
                    | 'start'
                    | 'center'
                    | 'right'
                    | 'end'
                    | 'justify'
                    | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              enableLink?: boolean | null;
              link?: {
                type?: ('reference' | 'custom' | 'section') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'projects';
                      value: string | Project;
                    } | null);
                url?: string | null;
                section?: string | null;
                label: string;
              };
              media: string | Media;
            };
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'mediaContent';
          }
        | {
            heading?: string | null;
            projects: (string | Project)[];
            sectionId?: string | null;
            backgroundColor?:
              | ('background' | 'background-1' | 'background-2' | 'transparent')
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'projectCards';
          }
        | {
            heading?: string | null;
            pictures: (string | Media)[];
            sectionId?: string | null;
            backgroundColor?:
              | ('background' | 'background-1' | 'background-2' | 'transparent')
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'imageGallery';
          }
        | {
            reusableContentBlockFields: {
              reusableContent: string | ReusableContent;
            };
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'reusableContentBlock';
          }
        | {
            title?: string | null;
            items?:
              | {
                  title: string;
                  content?: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format:
                        | 'left'
                        | 'start'
                        | 'center'
                        | 'right'
                        | 'end'
                        | 'justify'
                        | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  id?: string | null;
                }[]
              | null;
            sectionId?: string | null;
            backgroundColor?:
              | ('background' | 'background-1' | 'background-2' | 'transparent')
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'collapsibleList';
          }
        | {
            html: string;
            lazyLoad?: boolean | null;
            sectionId?: string | null;
            backgroundColor?:
              | ('background' | 'background-1' | 'background-2' | 'transparent')
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'customHTML';
          }
        | {
            project: string | Project;
            sectionId?: string | null;
            backgroundColor?:
              | ('background' | 'background-1' | 'background-2' | 'transparent')
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'productMain';
          }
        | {
            headline?: string | null;
            items?:
              | {
                  title: string;
                  image?: string | Media | null;
                  id?: string | null;
                }[]
              | null;
            sectionId?: string | null;
            backgroundColor?:
              | ('background' | 'background-1' | 'background-2' | 'transparent')
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'marquee';
          }
      )[]
    | null;
  nav?:
    | {
        link: {
          type?: ('reference' | 'custom' | 'section') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'projects';
                value: string | Project;
              } | null);
          url?: string | null;
          section?: string | null;
          label: string;
          appearance?: ('default' | 'primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
    | null;
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: string | Media | null;
  };
  parent?: (string | null) | Page;
  breadcrumbs?:
    | {
        doc?: (string | null) | Page;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  title: string;
  images: (string | Media)[];
  domain?: string | null;
  type?: ('project' | 'scene' | 'game') | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  credits?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  slug?: string | null;
  publishedOn?: string | null;
  visible?: boolean | null;
  featured?: boolean | null;
  links?:
    | {
        source:
          | 'custom'
          | 'github'
          | 'codesandbox'
          | 'codepen'
          | 'instagram'
          | 'behance';
        url: string;
        id?: string | null;
      }[]
    | null;
  tags?: (string | Tag)[] | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: string | Media | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  label?: string | null;
  value?: string | null;
  url?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format:
                  | 'left'
                  | 'start'
                  | 'center'
                  | 'right'
                  | 'end'
                  | 'justify'
                  | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format:
              | 'left'
              | 'start'
              | 'center'
              | 'right'
              | 'end'
              | 'justify'
              | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  enableUploads?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reusable-content".
 */
export interface ReusableContent {
  id: string;
  title: string;
  layout: (
    | {
        bannerFields: {
          type?: ('default' | 'success' | 'warning' | 'error') | null;
          addCheckmark?: boolean | null;
          content: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format:
                | 'left'
                | 'start'
                | 'center'
                | 'right'
                | 'end'
                | 'justify'
                | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'banner';
      }
    | {
        blogContentFields: {
          richText: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format:
                | 'left'
                | 'start'
                | 'center'
                | 'right'
                | 'end'
                | 'justify'
                | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'blogContent';
      }
    | {
        blogMarkdownFields: {
          markdown: string;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'blogMarkdown';
      }
    | {
        ctaFields: {
          richText: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format:
                | 'left'
                | 'start'
                | 'center'
                | 'right'
                | 'end'
                | 'justify'
                | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          links?:
            | {
                link: {
                  type?: ('reference' | 'custom' | 'section') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: string | Page;
                      } | null)
                    | ({
                        relationTo: 'projects';
                        value: string | Project;
                      } | null);
                  url?: string | null;
                  section?: string | null;
                  label: string;
                };
                id?: string | null;
              }[]
            | null;
        };
        sectionId?: string | null;
        backgroundColor?:
          | ('background' | 'background-1' | 'background-2' | 'transparent')
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'cta';
      }
    | {
        title?: string | null;
        cardGridFields?: {
          richText?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format:
                | 'left'
                | 'start'
                | 'center'
                | 'right'
                | 'end'
                | 'justify'
                | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          links?:
            | {
                link: {
                  type?: ('reference' | 'custom' | 'section') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: string | Page;
                      } | null)
                    | ({
                        relationTo: 'projects';
                        value: string | Project;
                      } | null);
                  url?: string | null;
                  section?: string | null;
                  label: string;
                };
                id?: string | null;
              }[]
            | null;
          cards?:
            | {
                title: string;
                image?: string | Media | null;
                description?: string | null;
                enableLink?: boolean | null;
                link?: {
                  type?: ('reference' | 'custom' | 'section') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: string | Page;
                      } | null)
                    | ({
                        relationTo: 'projects';
                        value: string | Project;
                      } | null);
                  url?: string | null;
                  section?: string | null;
                };
                id?: string | null;
              }[]
            | null;
        };
        sectionId?: string | null;
        backgroundColor?:
          | ('background' | 'background-1' | 'background-2' | 'transparent')
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'cardGrid';
      }
    | {
        headline?: string | null;
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format:
              | 'left'
              | 'start'
              | 'center'
              | 'right'
              | 'end'
              | 'justify'
              | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        sectionId?: string | null;
        backgroundColor?:
          | ('background' | 'background-1' | 'background-2' | 'transparent')
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'content';
      }
    | {
        formFields: {
          container?: boolean | null;
          richText: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format:
                | 'left'
                | 'start'
                | 'center'
                | 'right'
                | 'end'
                | 'justify'
                | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          form: string | Form;
        };
        sectionId?: string | null;
        backgroundColor?:
          | ('background' | 'background-1' | 'background-2' | 'transparent')
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'form';
      }
    | {
        mediaContentFields: {
          alignment?: ('contentMedia' | 'mediaContent') | null;
          container?: boolean | null;
          richText: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format:
                | 'left'
                | 'start'
                | 'center'
                | 'right'
                | 'end'
                | 'justify'
                | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          enableLink?: boolean | null;
          link?: {
            type?: ('reference' | 'custom' | 'section') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'projects';
                  value: string | Project;
                } | null);
            url?: string | null;
            section?: string | null;
            label: string;
          };
          media: string | Media;
        };
        sectionId?: string | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'mediaContent';
      }
    | {
        headline?: string | null;
        items?:
          | {
              title: string;
              image?: string | Media | null;
              id?: string | null;
            }[]
          | null;
        sectionId?: string | null;
        backgroundColor?:
          | ('background' | 'background-1' | 'background-2' | 'transparent')
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'marquee';
      }
  )[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  firstName?: string | null;
  lastName?: string | null;
  roles: ('admin' | 'public')[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'projects';
          value: string | Project;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  analytics: {
    cookieConsentTitle: string;
    cookieConsentDescription: string;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brand-info".
 */
export interface BrandInfo {
  id: string;
  logo: string | Media;
  socials?:
    | {
        platform: 'facebook' | 'instagram' | 'behance';
        link: string;
        id?: string | null;
      }[]
    | null;
  copyright?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "menu".
 */
export interface Menu {
  id: string;
  nav?:
    | {
        link: {
          type?: ('reference' | 'custom' | 'section') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'projects';
                value: string | Project;
              } | null);
          url?: string | null;
          section?: string | null;
          label: string;
          appearance?: ('default' | 'primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  logo?: string | Media | null;
  columns?:
    | {
        heading?: string | null;
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format:
              | 'left'
              | 'start'
              | 'center'
              | 'right'
              | 'end'
              | 'justify'
              | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        navItems?:
          | {
              link: {
                type?: ('reference' | 'custom' | 'section') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'projects';
                      value: string | Project;
                    } | null);
                url?: string | null;
                section?: string | null;
                label: string;
                appearance?: ('default' | 'primary' | 'secondary') | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
