---
import StealthLayout from '../../../layouts/StealthLayout.astro';
---

<StealthLayout title="Tiles">
  <main id="container">
    <canvas id="app_view"></canvas>
    <div id="scroll-container"></div>
    <div id="gui_container"></div>
  </main>
</StealthLayout>

<script>
  import * as THREE from 'three';
  import BaseScene, { BaseSceneState } from '@lib/sceneController';
  import { curve, range } from '@utils/math';
  import Gallery from '@lib/components/Gallery';

  const canvas = document.getElementById('app_view')! as HTMLCanvasElement;
  const { state, registerAnimationCallback, unregisterAnimationCallback } =
    BaseScene({ canvas });
  const { scene, renderer, camera, uniforms } = state;

  /* ---------- Geometry ---------- */
  const pictures = [
    { src: '/assets/projects/benji-demo-1.webp' },
    { src: '/assets/projects/3d-audio-visualizer-demo-1.webp' },
    { src: '/assets/projects/stacks-demo-1.webp' },
    { src: '/assets/projects/benji-demo-1.webp' },
    { src: '/assets/projects/stacks-demo-1.webp' },
  ];

  const tileWidth = 0.3,
    tileGap = 0.05;
  let scrollPosition = 0;
  const { gallery, minimap } = Gallery({
    position: scrollPosition,
    pictures,
    uniforms,
    tileWidth,
    gap: tileGap,
  });
  scene.add(gallery);
  scene.add(minimap);

  // Handle scroll
  const scrollContainer = document.getElementById('scroll-container')!;
  scrollContainer.addEventListener('scroll', function (event) {
    const container = event.currentTarget! as HTMLDivElement;
    const totalWidth = container.offsetWidth;
    const curOffset = container.scrollLeft;
    scrollPosition = curOffset / totalWidth;
  });
  window.addEventListener('wheel', function (event) {
    // TODO: make it smooth :)
    scrollContainer.scrollTo(scrollContainer.scrollLeft + event.deltaY, 0);
  });

  function animationLoop(state: BaseSceneState) {
    // Update gallery
    gallery.children.forEach((picture, i) => {
      // assuming all cards have equal width
      picture.position.x =
        (i - (gallery.children.length - 1) * scrollPosition) *
        (tileWidth + tileGap);
    });

    // // Update minimap
    minimap.children.forEach((line, i) => {
      // Value between 0 and 1
      // Starting from current position
      // ranging from 1/4 of total length
      const y = curve(
        i / minimap.children.length - 1.5 / minimap.children.length,
        4 / minimap.children.length,
        0,
        scrollPosition,
      );
      line.scale.y = Math.max(0.5, y);
    });
  }

  registerAnimationCallback(animationLoop);
</script>

<style is:global>
  html {
    height: 100vh;
    overflow: hidden;
  }
</style>

<style>
  body {
    width: 100%;
    height: 100vh;
    background: var(--color-background);
    overflow: hidden;
    overscroll-behavior: none;
    margin: 0;
    padding: 0;
    position: relative;
  }

  #app_view {
    display: block;
    position: relative;
    z-index: 99;
    width: 100%;
    height: 100%;
  }

  #scroll-container {
    display: inline-block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100%;
    overflow-y: hidden;
    overflow-x: scroll;
    z-index: 100;
  }

  #scroll-container::before {
    content: '';
    display: inline-block;
    width: 200vw;
  }

  #container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  #gui_container {
    position: absolute;
    top: var(--header-height);
    left: 2rem;
  }

  #gui {
    position: absolute;
    top: 0;
    left: 0;
  }

  #player_container {
    display: inline-flex;
    flex-direction: column;
    position: absolute;
    bottom: 0;
    width: 100%;
    max-width: 400px;
    margin-bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    row-gap: 1rem;
  }

  #play_btn {
    position: absolute;
    width: 2rem;
    height: 2rem;
    bottom: 3px;
    left: calc(50% - 125px);
    transform: translateX(-50%);
    background: transparent;
    border: none;
    z-index: 99;
    cursor: pointer;
  }

  .controls {
    position: relative;
    z-index: 99;
    display: flex;
    flex-direction: column;
    row-gap: 2rem;
    transform: scale(0.9);
  }
</style>
