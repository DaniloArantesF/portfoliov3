---
import SceneLayout from 'src/layouts/SceneLayout.astro';

const title = 'Embers';
---

<SceneLayout title={title} audio />

<script>
  import * as THREE from 'three';
  import BaseScene, { isReady } from '@lib/sceneController';
  import { usePlayer } from '~/components/Player';
  import renderFragShader from './shaders/render.fs.glsl';
  import renderVertexShader from './shaders/render.vs.glsl';
  import positionFragmentShader from './shaders/position.fs.glsl';
  import copyFragmentShader from './shaders/copy.fs.glsl';
  import quadVertexShader from './shaders/quad.vs.glsl';
  import velocityFragmentShader from './shaders/velocity.fs.glsl';
  import { noise } from '@utils/noise';

  const SIMULATION_WIDTH = 32;

  /* -------------------------------- */
  /*          Setup & Globals         */
  /* -------------------------------- */
  const canvas = document.getElementById('app-view')! as HTMLCanvasElement;
  const { state, registerRenderCallback, setSceneHook, utils } = BaseScene({
    canvas,
    settings: {
      orbitControls: true,
      cameraPosition: [0, 0, 5],
      antialias: true,
    },
  });
  const { camera, renderer, composer } = state;

  /* ---------- Audio ---------- */
  let player = usePlayer.get();

  /* -------------------------------- */
  /*                Scene             */
  /* -------------------------------- */
  class Scene {
    settings = {
      cameraPosition: [0, 0, 5],

      radius: 30,
      viscosity: 0.12,
      elasticity: 0.015,
      color1: '#2095cc',
      color2: '#20cc2e',
      TEXTURE_WIDTH: 256,
      TEXTURE_HEIGHT: 256,
      quality: 0,
      motionBlur: true,
      useShadow: false,
      sizeRatio: 1.89,
      precision: 'highp' as 'highp' | 'mediump' | 'lowp',

      befEnlargementNear: 34.0,
      befEnlargementFar: 129.0,
      befEnlargementFactor: 5.2,
      aftEnlargementNear: 34.0,
      aftEnlargementFar: 129.0,
      aftEnlargementFactor: 1.8,
      befOpacityNear: 0.0,
      befOpacityFar: 79.0,
      befOpacityBase: 0.35,
      aftOpacityNear: 0.0,
      aftOpacityFar: 79.0,
      aftOpacityBase: 0.35,
    };

    mesh!: THREE.Mesh | THREE.Points;
    renderShader!: THREE.ShaderMaterial;
    distanceShader!: THREE.ShaderMaterial;
    lights!: THREE.Object3D;
    color1!: THREE.Color;
    color2!: THREE.Color;

    fbo: FBO;

    constructor() {
      this.init();
      this.fbo = new FBO();
      this.setupLights();
      this.particles();
      registerRenderCallback(this.render.bind(this));
      isReady.set(true);
    }

    init() {
      const gridHelper = new THREE.GridHelper(100, 100);
      state.scene.add(gridHelper);
    }

    render() {}

    postProcessing() {}

    particles() {
      const TEXTURE_WIDTH = this.settings.TEXTURE_WIDTH;
      const TEXTURE_HEIGHT = this.settings.TEXTURE_HEIGHT;
      const AMOUNT = TEXTURE_WIDTH * TEXTURE_HEIGHT;

      this.renderShader = new THREE.ShaderMaterial({
        uniforms: THREE.UniformsUtils.merge([
          // THREE.UniformsLib.shadowmap,
          THREE.UniformsLib.lights,
          {
            textureDefaultPosition: {
              type: 't',
              value: this.fbo.defaultPositionTexture,
            },
            texturePosition: { type: 't', value: null },
            dim: { type: 'f', value: 0 },
            sizeRatio: { type: 'f', value: 0 },
            lightPos: { type: 'v3', value: this.lights.position },
            color1: { type: 'c', value: this.color1 },
            color2: { type: 'c', value: this.color2 },
            camera: { type: 'v3', value: camera.position },
            befEnlargementNear: {
              type: 'f',
              value: this.settings.befEnlargementNear,
            },
            befEnlargementFar: {
              type: 'f',
              value: this.settings.befEnlargementFar,
            },
            befEnlargementFactor: {
              type: 'f',
              value: this.settings.befEnlargementFactor,
            },
            aftEnlargementNear: {
              type: 'f',
              value: this.settings.aftEnlargementNear,
            },
            aftEnlargementFar: {
              type: 'f',
              value: this.settings.aftEnlargementFar,
            },
            aftEnlargementFactor: {
              type: 'f',
              value: this.settings.aftEnlargementFactor,
            },
            befOpacityNear: { type: 'f', value: this.settings.befOpacityNear },
            befOpacityFar: { type: 'f', value: this.settings.befOpacityFar },
            befOpacityBase: { type: 'f', value: this.settings.befOpacityBase },
            aftOpacityNear: { type: 'f', value: this.settings.aftOpacityNear },
            aftOpacityFar: { type: 'f', value: this.settings.aftOpacityFar },
            aftOpacityBase: { type: 'f', value: this.settings.aftOpacityBase },
          },
        ]),
        defines: {
          USE_SHADOW: this.settings.useShadow,
        },
        precision: this.settings.precision,
        vertexShader: renderVertexShader,
        fragmentShader: renderFragShader,
        lights: true,
        fog: false,
        transparent: true,
        blending: THREE.AdditiveBlending,
        depthTest: false,
        depthWrite: false,
      });

      this.color1 = new THREE.Color(this.settings.color1);
      this.color2 = new THREE.Color(this.settings.color2);

      this.renderShader.uniforms.color1.value = this.color1;
      this.renderShader.uniforms.color2.value = this.color2;
      this.renderShader.uniforms.dim.value = FBO.dimension;
      this.renderShader.uniforms.sizeRatio.value = this.settings.sizeRatio;

      // this.distanceShader = new THREE.ShaderMaterial({
      //   uniforms: {
      //     lightPos: { value: lights.mesh.position },
      //     texturePosition: { value: null },
      //   },
      //   precision: this.settings.precision,
      //   vertexShader: distance_vert,
      //   fragmentShader: distance_frag,
      //   lights: false,
      //   fog: false,
      //   depthTest: false,
      //   depthWrite: false,
      //   side: THREE.BackSide,
      //   blending: THREE.NoBlending,
      // });

      // geometry-block
      const position = new Float32Array(AMOUNT * 3);
      for (let i = 0; i < AMOUNT; i++) {
        const i3 = i * 3;
        position[i3 + 0] = ~~(i / TEXTURE_HEIGHT) / TEXTURE_WIDTH;
        position[i3 + 1] = (i % TEXTURE_HEIGHT) / TEXTURE_HEIGHT;
      }

      const geometry = new THREE.BufferGeometry();
      geometry.setAttribute('position', new THREE.BufferAttribute(position, 3));

      this.mesh = new THREE.Points(geometry, this.renderShader);
      // this.mesh.customDistanceMaterial = this.distanceShader;
      this.mesh.castShadow = true;
      this.mesh.receiveShadow = true;
      state.scene.add(this.mesh);
    }

    handleEvents() {
      setSceneHook('onResize', () => {
        const resolution = new THREE.Vector2(
          window.innerWidth,
          window.innerHeight,
        );
        utils.updateSetting('cameraPosition', this.settings.cameraPosition);
        utils.resetCamera();
      });
    }

    setupLights() {
      this.lights = new THREE.Object3D();
      this.lights.position.set(0, 190, 0);

      const ambient = new THREE.AmbientLight(0x333333, 1.4);
      this.lights.add(ambient);

      const directionalLight = new THREE.DirectionalLight(0xba8b8b, 0.5);
      directionalLight.position.set(1, 1, 1);
      this.lights.add(directionalLight);

      const directionalLight2 = new THREE.DirectionalLight(0x8bbab4, 0.3);
      directionalLight2.position.set(1, 1, -1);
      this.lights.add(directionalLight2);

      const pointLight = new THREE.PointLight(0x999999, 1.2, 1600);
      pointLight.castShadow = true;
      pointLight.shadow.camera.near = 10;
      pointLight.shadow.camera.far = 1000;
      pointLight.shadow.bias = 0.04;
      pointLight.shadow.mapSize.width = 1024;
      pointLight.shadow.mapSize.height = 2048;
      this.lights.add(pointLight);
    }
  }

  let life = 0;
  class FBO {
    static dimension = 220;
    static TEXTURE_WIDTH = 256;
    static TEXTURE_HEIGHT = 256;

    settings = {
      radius: 30,
      viscosity: 0.12,
      elasticity: 0.015,
    };

    randomTexture: THREE.DataTexture;
    defaultPositionTexture: THREE.DataTexture;

    copyShader: THREE.RawShaderMaterial;
    positionShader: THREE.RawShaderMaterial;
    velocityShader: THREE.RawShaderMaterial;

    velocityTexture1: THREE.WebGLRenderTarget;
    velocityTexture2: THREE.WebGLRenderTarget;

    positionTexture1: THREE.WebGLRenderTarget;
    positionTexture2: THREE.WebGLRenderTarget;

    mesh: THREE.Mesh;

    randomData!: Float32Array;

    constructor() {
      this.randomTexture = this.createRandomTexture();
      this.defaultPositionTexture = this.createDefaultPositionTexture();

      this.copyShader = new THREE.RawShaderMaterial({
        uniforms: {
          resolution: {
            value: new THREE.Vector2(FBO.TEXTURE_HEIGHT, FBO.TEXTURE_WIDTH),
          },
          texture: { value: null },
        },
        vertexShader: quadVertexShader,
        fragmentShader: copyFragmentShader,
        fog: false,
        lights: false,
        depthWrite: false,
        depthTest: false,
      });

      this.positionShader = new THREE.RawShaderMaterial({
        uniforms: {
          resolution: {
            value: new THREE.Vector2(FBO.TEXTURE_HEIGHT, FBO.TEXTURE_WIDTH),
          },
          texturePosition: { value: null },
          textureVelocity: { value: null },
        },
        vertexShader: quadVertexShader,
        fragmentShader: positionFragmentShader,
        blending: THREE.NoBlending,
        transparent: false,
        fog: false,
        lights: false,
        depthWrite: false,
        depthTest: false,
      });

      this.velocityShader = new THREE.RawShaderMaterial({
        uniforms: {
          resolution: {
            value: new THREE.Vector2(FBO.TEXTURE_HEIGHT, FBO.TEXTURE_WIDTH),
          },
          textureRandom: { value: this.randomTexture },
          texturePosition: { value: null },
          textureVelocity: { value: null },
          mousePosition: { value: new THREE.Vector3() },
          mousePrev: { value: new THREE.Vector3() },
          mouseVelocity: { value: new THREE.Vector3() },
          mouseRadius: { value: this.settings.radius },
          viscosity: { value: this.settings.viscosity },
          elasticity: { value: this.settings.elasticity },
          defaultPosition: { value: this.defaultPositionTexture },
          dim: { value: FBO.dimension },
          time: { value: 0 },
        },
        vertexShader: quadVertexShader,
        fragmentShader: velocityFragmentShader,
        blending: THREE.NoBlending,
        transparent: false,
        fog: false,
        lights: false,
        depthWrite: false,
        depthTest: false,
      });

      // Create mesh
      const geometry = new THREE.BufferGeometry();
      const vertices = new Float32Array([-1.0, -1.0, 3.0, -1.0, -1.0, 3.0]); // oversized triangle

      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 2));
      this.mesh = new THREE.Mesh(geometry, this.copyShader);
      this.mesh.frustumCulled = false;
      state.scene.add(this.mesh);

      // Create FBOs
      this.velocityTexture1 = new THREE.WebGLRenderTarget(
        FBO.TEXTURE_HEIGHT,
        FBO.TEXTURE_WIDTH,
        {
          wrapS: THREE.ClampToEdgeWrapping,
          wrapT: THREE.ClampToEdgeWrapping,
          minFilter: THREE.NearestFilter,
          magFilter: THREE.NearestFilter,
          format: THREE.RGBAFormat,
          // type: this.settings.mobile ? THREE.HalfFloatType : THREE.FloatType
          //depthTest: false,
          type: THREE.FloatType,
          depthBuffer: false,
          stencilBuffer: false,
        },
      );

      this.velocityTexture2 = this.velocityTexture1.clone();
      this.copyTexture(this.createVelocityTexture(), this.velocityTexture1);
      this.copyTexture(this.velocityTexture1.texture, this.velocityTexture2);

      this.positionTexture1 = new THREE.WebGLRenderTarget(
        FBO.TEXTURE_HEIGHT,
        FBO.TEXTURE_WIDTH,
        {
          wrapS: THREE.ClampToEdgeWrapping,
          wrapT: THREE.ClampToEdgeWrapping,
          minFilter: THREE.NearestFilter,
          magFilter: THREE.NearestFilter,
          format: THREE.RGBAFormat,
          // type: settings.mobile ? THREE.HalfFloatType : THREE.FloatType,
          // depthTest: false,
          type: THREE.FloatType,
          // depthWrite: false,
          depthBuffer: false,
          stencilBuffer: false,
        },
      );

      this.positionTexture2 = this.positionTexture1.clone();
      this.copyTexture(this.createPositionTexture(), this.positionTexture1);
      this.copyTexture(this.positionTexture1.texture, this.positionTexture2);
    }

    createDataTexture(data: BufferSource): THREE.DataTexture {
      const texture = new THREE.DataTexture(
        data,
        FBO.TEXTURE_HEIGHT,
        FBO.TEXTURE_WIDTH,
        THREE.RGBAFormat,
        THREE.FloatType,
      );
      texture.minFilter = THREE.NearestFilter;
      texture.magFilter = THREE.NearestFilter;
      texture.needsUpdate = true;
      texture.generateMipmaps = false;
      texture.flipY = false;
      return texture;
    }

    createRandomTexture() {
      this.randomData = new Float32Array(
        FBO.TEXTURE_HEIGHT * FBO.TEXTURE_WIDTH * 4,
      );
      for (let x = 0; x < FBO.TEXTURE_WIDTH; x++) {
        for (let z = 0; z < FBO.TEXTURE_HEIGHT; z++) {
          this.randomData[x * FBO.TEXTURE_HEIGHT * 4 + z * 4] =
            Math.random() * 2 - 1;
          this.randomData[x * FBO.TEXTURE_HEIGHT * 4 + z * 4 + 1] =
            Math.random() * 2 - 1;
          this.randomData[x * FBO.TEXTURE_HEIGHT * 4 + z * 4 + 2] =
            Math.random() * 2 - 1;
        }
      }

      return this.createDataTexture(this.randomData);
    }

    createPositionTexture() {
      const data = new Float32Array(FBO.TEXTURE_WIDTH * FBO.TEXTURE_HEIGHT * 4);
      for (let x = 0; x < FBO.TEXTURE_WIDTH; x++) {
        for (let z = 0; z < FBO.TEXTURE_HEIGHT; z++) {
          const xNorm = x / FBO.TEXTURE_WIDTH;
          const zNorm = z / FBO.TEXTURE_HEIGHT;
          const res = 7.6;
          data[x * FBO.TEXTURE_HEIGHT * 4 + z * 4] =
            FBO.dimension / 2 -
            FBO.dimension * (x / FBO.TEXTURE_WIDTH) +
            this.randomData[x * FBO.TEXTURE_HEIGHT * 4 + z * 4];
          data[x * FBO.TEXTURE_HEIGHT * 4 + z * 4 + 1] =
            //noise(xNorm * res, (zNorm * res) / 2, life) * 8 +
            this.randomData[x * FBO.TEXTURE_HEIGHT * 4 + z * 4 + 1] * 1.0;
          data[x * FBO.TEXTURE_HEIGHT * 4 + z * 4 + 2] =
            FBO.dimension / 2 -
            FBO.dimension * (z / FBO.TEXTURE_HEIGHT) +
            this.randomData[x * FBO.TEXTURE_HEIGHT * 4 + z * 4 + 2];
        }
      }

      return this.createDataTexture(data);
    }

    createDefaultPositionTexture() {
      const data = new Float32Array(FBO.TEXTURE_WIDTH * FBO.TEXTURE_HEIGHT * 4);
      for (let x = 0; x < FBO.TEXTURE_WIDTH; x++) {
        for (let z = 0; z < FBO.TEXTURE_HEIGHT; z++) {
          data[x * FBO.TEXTURE_HEIGHT * 4 + z * 4] =
            FBO.dimension / 2 - FBO.dimension * (x / FBO.TEXTURE_WIDTH);
          data[x * FBO.TEXTURE_HEIGHT * 4 + z * 4 + 1] = 0;
          data[x * FBO.TEXTURE_HEIGHT * 4 + z * 4 + 2] =
            FBO.dimension / 2 - FBO.dimension * (z / FBO.TEXTURE_HEIGHT);
        }
      }

      return this.createDataTexture(data);
    }

    createVelocityTexture() {
      return this.createDataTexture(
        new Float32Array(FBO.TEXTURE_WIDTH * FBO.TEXTURE_HEIGHT * 4),
      );
    }

    copyTexture(input: THREE.Texture, output: THREE.WebGLRenderTarget) {
      this.mesh.material = this.copyShader;
      this.copyShader.uniforms.texture.value = input;
      renderer.setRenderTarget(output);
      renderer.render(state.scene, camera);
    }
  }

  const scene = new Scene();
</script>
