---
import SceneLayout from 'src/layouts/SceneLayout.astro';
---

<SceneLayout title={'Waves'} audio />

<script>
  import * as THREE from 'three';
  import BaseScene, { isReady } from '@lib/sceneController';
  import vertexShader from './shaders/vertex.vs.glsl?raw';
  import fragmentShader from './shaders/fragment.fs.glsl?raw';
  import type { BaseSceneState } from '@lib/types';
  import { usePlayer } from '@components/Player';

  /* -------------------------------- */
  /*          Setup & Globals         */
  /* -------------------------------- */
  const canvas = document.getElementById('app-view')! as HTMLCanvasElement;
  const { state, registerRenderCallback } = BaseScene({
    canvas,
    settings: {
      cameraPosition: [0, 7, 7],
      orbitControls: true,
      gridHelper: true,
    },
  });
  const { scene, renderer, camera } = state;

  /* ---------- Audio ---------- */
  let player = usePlayer.get();

  const settings = {
    color1: new THREE.Color(1, 0, 0),
    color2: new THREE.Color(0, 0, 1),
    foldFrequency: 0.03,
    foldsHeight: 5.5,
    waveFrequency: 0.5,
    waveAmplitude: 0.1,
    waveDirection: [-0.5, 0.5],
  };

  const uniforms = {
    ...state.uniforms,
    color1: { value: settings.color1 },
    color2: { value: settings.color2 },
    waveFrequency: { value: settings.waveFrequency },
    waveAmplitude: { value: settings.waveAmplitude },
    waveDirection: { value: settings.waveDirection },
    foldFrequency: { value: settings.foldFrequency },
    foldHeight: { value: settings.foldsHeight },
    uData: { value: player.buffer },
  };

  /* -------------------------------- */
  /*                Scene             */
  /* -------------------------------- */
  const geometry = new THREE.BoxGeometry(5, 2, 5, 100, 5, 100);
  const material = new THREE.ShaderMaterial({
    uniforms,
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    transparent: true,
    wireframe: true,
    side: THREE.FrontSide,
  });

  const mesh = new THREE.Mesh(geometry, material);
  scene.add(mesh);

  function animationLoop(state: BaseSceneState) {
    if (player.analyser) {
      player.analyser.getByteFrequencyData(player.buffer);
      uniforms.uData.value = player.buffer;
    }
  }

  isReady.set(true);
  registerRenderCallback(animationLoop);
</script>
