---
import SceneLayout from 'src/layouts/SceneLayout.astro';
---

<SceneLayout title={"Ulam's Orb"} audio />

<script>
  import * as THREE from 'three';
  import BaseScene, { isReady } from '@lib/sceneController';
  import vertexShader from './shaders/vertex.vs.glsl';
  import fragmentShader from './shaders/fragment.fs.glsl';
  import { inRange, isPrime } from '@utils/math';
  import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
  import globePassVertexShader from './shaders/globePass.vs.glsl';
  import globePassFragmentShader from './shaders/globePass.fs.glsl';
  import { usePlayer } from '@components/Player';
  import type { BaseSceneState } from '@lib/types';
  import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';
  import { isMobile } from '@utils/utils';

  /* -------------------------------- */
  /*          Setup & Globals         */
  /* -------------------------------- */
  let globePass: ShaderPass, bloomPass: UnrealBloomPass;
  const canvas = document.getElementById('app-view')! as HTMLCanvasElement;

  const { state, utils, registerRenderCallback, setSceneHook } = BaseScene({
    canvas,
    settings: {
      orbitControls: false,
    },
  });
  const { scene, camera, composer } = state;

  /* ---------- Audio ---------- */
  let player = usePlayer.get();

  const defaultGridSize = isMobile() ? 100 : 200;
  const settings = {
    cameraPosition: [0, 2.5, 0],
    gridSize: { x: defaultGridSize, y: defaultGridSize }, // [x, y]
    waveAmplitude: 0.3,
    waveFrequency: 5,
    uActive: true,
    uProgress: 1,
    uScale: 1.15,
    uPower: 11,
    uSize: 0.08,
    bloomStrength: 1.5,
    bloomThreshold: 0.2,
    bloomRadius: 0.1,
  };

  const uniforms = {
    ...state.uniforms,
    waveFrequency: { value: settings.waveFrequency },
    waveAmplitude: { value: settings.waveAmplitude },
  };

  // debug
  // let primeDelta = 0;
  // let primeCount = 0;

  // Return a m x n list of booleans indicating whether a cell is prime
  function UlamSpiral(size: number[]): Array<Array<number>> {
    // let start = Date.now();
    const spiral = new Array(size[1])
      .fill(0)
      .map(() => new Array(size[0]).fill(0));

    let directions = [
      [0, 1],
      [1, 0],
      [0, -1],
      [-1, 0],
    ];
    let direction = 1;

    let x = ~~((size[0] - 1) / 2),
      y = ~~((size[1] - 1) / 2);

    let curPathLength = 1; // number of steps in current path
    let curDistance = 0; // number of steps traveled so far
    let turns = 2; // turn counter to update path length
    let curNumber = 1; // number to be written

    while (inRange(0, size[0], x) && inRange(0, size[1], y)) {
      while (curDistance < curPathLength) {
        // Write current number
        spiral[y][x] = Number(isPrime(curNumber));
        // primeCount += spiral[y][x];
        curNumber++;
        curDistance++;

        // Update coords
        (y += directions[direction][1]), (x += directions[direction][0]);
      }

      // Cycle to next direction
      direction = (direction + 1) % 4;

      // Every other turn the current path length goes up by one
      turns--;
      if (turns === 0) {
        curPathLength++;
        turns = 2;
      }

      // Reset distance
      curDistance = 0;
    }

    // const end = Date.now();
    // primeDelta = end - start;
    // console.log(
    //   `Generated ${curNumber} numbers, ${primeCount} primes in ${primeDelta}ms`,
    // );
    return spiral;
  }

  function setupGUI() {
    const gui = utils.gui;

    let cb: NodeJS.Timeout;
    gui
      .addInput(settings, 'gridSize', {
        x: { min: 1, max: 3000, step: 1 },
        y: { min: 1, max: 3000, step: 1 },
      })
      .on('change', () => {
        if (cb) clearTimeout(cb);
        cb = setTimeout(() => createPoints(), 1000);
      });
    gui
      .addInput(settings, 'waveAmplitude', {
        step: 0.001,
        min: 0.05,
        max: 2,
      })
      .on('change', ({ value }) => {
        uniforms.waveAmplitude.value = value;
      });

    gui
      .addInput(settings, 'waveFrequency', {
        step: 0.01,
        min: 0.01,
        max: 50,
      })
      .on('change', ({ value }) => {
        uniforms.waveFrequency.value = value;
      });

    gui
      .addInput(settings, 'uScale', { min: -5, max: 10, step: 0.01 })
      .on('change', () => (globePass.uniforms.uScale.value = settings.uScale));
    gui
      .addInput(settings, 'uPower', { min: -5, max: 50, step: 0.1 })
      .on('change', () => (globePass.uniforms.uPower.value = settings.uPower));
    gui
      .addInput(settings, 'uSize', { min: -2, max: 5, step: 0.01 })
      .on('change', () => (globePass.uniforms.uSize.value = settings.uSize));
    gui
      .addInput(settings, 'uProgress', { min: 0, max: 1, step: 0.01 })
      .on(
        'change',
        () => (globePass.uniforms.uProgress.value = settings.uProgress),
      );
    gui
      .addInput(settings, 'uActive')
      .on(
        'change',
        () => (globePass.uniforms.uActive.value = settings.uActive),
      );

    gui
      .addInput(settings, 'bloomStrength', { min: 0, max: 5, step: 0.1 })
      .on('change', ({ value }) => (bloomPass.strength = value));
    gui
      .addInput(settings, 'bloomRadius', { min: 0, max: 3, step: 0.05 })
      .on('change', ({ value }) => (bloomPass.radius = value));
    gui
      .addInput(settings, 'bloomThreshold', { min: 0, max: 3, step: 0.01 })
      .on('change', ({ value }) => (bloomPass.threshold = value));
  }

  let focusPoint = new THREE.Vector3(0, 0, 0).add(scene.position);
  function animationLoop(state: BaseSceneState) {
    if (!state.orbitControls.enabled) {
      let time = state.time * 0.05;
      camera.position.x = -Math.sin(time * 2);
      camera.position.z = Math.cos(time * 2);
      focusPoint.y = 1 + 0.2 * (0.5 * Math.cos(time * 2) + 0.5);
      camera.lookAt(focusPoint);
    }
  }

  // function calculateZ(
  //   targetZ: number,
  //   targetHeight1 = window.innerHeight / 8,
  //   targetHeight2 = window.innerHeight / 2,
  // ) {
  //   let vFOV = (camera.fov * Math.PI) / 180;

  //   // calculate viewport height from camera position
  //   let vHeightPartial = 2 * Math.tan(vFOV / 2);

  //   var p1 = targetHeight1 * window.innerHeight;
  //   var p2 = targetZ * vHeightPartial;
  //   var p3 = targetHeight2 * vHeightPartial;
  //   var p4 = targetHeight2 * p2;
  //   var p5 = p1 + p4;
  //   var z = p5 / p3;
  //   return z;
  // }

  function handleEvents() {
    // Handle resize
    setSceneHook('onResize', () => {
      const resolution = new THREE.Vector2(
        window.innerWidth,
        window.innerHeight,
      );
      globePass.uniforms.uResolution.value = resolution;
      bloomPass.resolution = resolution;
      utils.updateSetting('cameraPosition', settings.cameraPosition);
      utils.resetCamera();
    });
  }

  function postProcessing() {
    globePass = new ShaderPass({
      uniforms: {
        ...uniforms,
        tDiffuse: { value: null },
        uBackgroundColor: { value: new THREE.Color(0x090c1b) },
        uProgress: { value: settings.uProgress },
        uScale: { value: settings.uScale },
        uPower: { value: settings.uPower },
        uSize: { value: settings.uSize },
        uActive: { value: settings.uActive },
      },
      vertexShader: globePassVertexShader,
      fragmentShader: globePassFragmentShader,
    });

    bloomPass = new UnrealBloomPass(
      new THREE.Vector2(window.innerWidth, window.innerHeight),
      settings.bloomStrength,
      settings.bloomRadius,
      settings.bloomThreshold,
    );

    composer.addPass(bloomPass);
    composer.addPass(globePass);
  }

  /* -------------------------------- */
  /*                Scene             */
  /* -------------------------------- */
  let points: THREE.Points;

  const material = new THREE.ShaderMaterial({
    uniforms,
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    transparent: true,
  });

  function createPoints() {
    if (points) {
      scene.remove(points);
    }

    const geometry = new THREE.PlaneGeometry(
      10,
      10,
      settings.gridSize.x,
      settings.gridSize.y,
    );

    const pointCount = geometry.attributes.position.count;
    const spiralSize = Math.ceil(Math.sqrt(pointCount));

    // Calculate number spiral
    const numberSpiral = UlamSpiral([spiralSize, spiralSize]).flat();
    const typed = new Float32Array(numberSpiral);
    const spiralBuffer = new THREE.BufferAttribute(typed, 1);
    geometry.setAttribute('isPrime', spiralBuffer);

    points = new THREE.Points(geometry, material);
    points.rotateX(-Math.PI / 2);

    scene.add(points);
  }

  // Set default camera position
  utils.updateSetting('cameraPosition', settings.cameraPosition);
  utils.resetCamera();

  createPoints();
  postProcessing();
  setupGUI();
  handleEvents();
  registerRenderCallback(animationLoop);
  isReady.set(true);
</script>
