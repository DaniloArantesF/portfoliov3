---
import SceneLayout from 'src/layouts/SceneLayout.astro';
import * as readme from './readme.md';

const title = readme?.frontmatter?.title ?? '';
---

<SceneLayout title={title} />

<script>
  import * as THREE from 'three';
  import BaseScene, { isReady } from '@lib/sceneController';
  import vertexShader from './shaders/vertex.vs.glsl?raw';
  import fragmentShader from './shaders/fragment.fs.glsl?raw';
  import type { BaseSceneState } from '@lib/types';
  import { MeshLineGeometry, MeshLineMaterial } from 'meshline';

  /* -------------------------------- */
  /*          Setup & Globals         */
  /* -------------------------------- */
  const canvas = document.getElementById('app_view')! as HTMLCanvasElement;
  const { state, registerRenderCallback } = BaseScene({
    canvas,
    settings: {
      orbitControls: true,
      cameraPosition: [0, 0, 3],
    },
  });
  const { scene, camera, uniforms } = state;

  const monitor = {};
  const settings = {
    scale: 2,
    dt: 0.005,
    sigma: 10,
    beta: 8 / 3,
    rho: 28,
  };

  /* -------------------------------- */
  /*                Scene             */
  /* -------------------------------- */
  function Scene() {
    let mesh: THREE.Mesh,
      material: MeshLineMaterial,
      geometry: MeshLineGeometry;

    const positions: THREE.Vector3[] = [];

    const rand = () => (Math.random() - 0.5) * settings.scale;
    let currentPosition = new THREE.Vector3(rand(), rand(), 0);

    function animationLoop({ time }: BaseSceneState) {
      const [x, y, z] = lorenzAttractor(currentPosition.toArray(), settings.dt);

      // Calculate next position
      currentPosition = currentPosition.add(new THREE.Vector3(x, y, z));

      // Normalize and scale coordinates
      const nextPosition = currentPosition
        .clone()
        .normalize()
        .multiplyScalar(settings.scale);
      geometry.advance(nextPosition);
    }

    // https://en.wikipedia.org/w/index.php?title=Lorenz_system
    function lorenzAttractor(
      position: [number, number, number],
      delta: number,
    ) {
      const [x, y, z] = position;
      const { sigma, beta, rho } = settings;

      const dx = sigma * (y - x) * delta;
      const dy = (x * (rho - z) - y) * delta;
      const dz = (x * y - beta * z) * delta;

      return [dx, dy, dz];
    }

    function init() {
      // Generate points and make a curve
      positions.push(currentPosition.clone());

      material = new MeshLineMaterial({
        color: 0xff0000,
        lineWidth: 0.01,
        resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),
      });

      geometry = new MeshLineGeometry();

      const len = 1000;
      for (let i = 0; i < len; i++) {
        positions.push(currentPosition.clone());
      }

      geometry.setPoints(positions);

      mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);
    }

    init();
    registerRenderCallback(animationLoop);
    isReady.set(true);
  }

  Scene();
</script>
