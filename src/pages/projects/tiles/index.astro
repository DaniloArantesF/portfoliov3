---
import SceneLayout from 'src/layouts/SceneLayout.astro';
---

<SceneLayout title="Gallery" />

<script>
  import * as THREE from 'three';
  import gsap from 'gsap';
  import { Observer } from 'gsap/Observer';
  import BaseScene, { isReady } from '@lib/sceneController';
  import imageFragmentShader from './shaders/image.fs.glsl';
  import imageVertexShader from './shaders/image.vs.glsl';
  import Minimap from '@lib/components/Minimap';
  import PickHelper from '@lib/pickHelper';
  import { clamp, curve } from '@utils/math';
  import type { BaseSceneState, Uniforms } from '@lib/types';

  /* -------------------------------- */
  /*          Setup & Globals         */
  /* -------------------------------- */
  const canvas = document.getElementById('app-view')! as HTMLCanvasElement;
  const { state, registerRenderCallback } = BaseScene({
    canvas,
    settings: { cameraPosition: [0, 0, 1.25] },
  });
  const { scene, camera, uniforms } = state;

  let scrollPosition = 0;
  let clicked: null | number = null;
  const damp = THREE.MathUtils.damp;
  const dampingFactor = 0.05;

  /* -------------------------------- */
  /*                Scene             */
  /* -------------------------------- */
  type ImageProps = Partial<Omit<THREE.Mesh, 'scale'>> & {
    scale?: THREE.Vector3;
    color?: THREE.Color;
    zoom?: number;
    grayscale?: number;
    url: string;
    uniforms: Uniforms;
    index: number;
  };

  const Image: (props: ImageProps) => THREE.Mesh = ({
    url,
    index,
    uniforms,
    position = new THREE.Vector3(0, 0, 0),
    scale = new THREE.Vector3(0.3, 1, 1),
    color = new THREE.Color(255, 255, 255),
    zoom = 1,
    grayscale = 0,
  }) => {
    const imageSize = new THREE.Vector2(1, 1);
    const texture = new THREE.TextureLoader().load(url, () => {
      imageSize.set(texture.image.width, texture.image.height);
      isReady.set(true);
    });

    const geometry = new THREE.PlaneGeometry(1, 1, 5, 5);
    const material = new THREE.ShaderMaterial({
      vertexShader: imageVertexShader,
      fragmentShader: imageFragmentShader,
      uniforms: {
        ...uniforms,
        imageSize: { value: imageSize },
        color: { value: color },
        zoom: { value: zoom },
        grayscale: { value: grayscale },
        opacity: { value: 1 },
        map: {
          value: texture,
        },
      },
      side: THREE.DoubleSide,
      transparent: true,
    });

    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.copy(position);
    mesh.scale.copy(scale);

    function animationLoop({ time }: BaseSceneState) {
      material.uniforms.grayscale.value = damp(
        material.uniforms.grayscale.value,
        clicked === index ? 0 : 1,
        dampingFactor,
        time,
      );
      material.uniforms.color.value.lerp(
        color.set(clicked === index ? 'white' : '#aaa'),
      );
    }

    registerRenderCallback(animationLoop);
    return mesh;
  };

  interface GalleryProps {
    pictures: { src: string }[];
    uniforms: Uniforms;
    tileWidth: number;
    gap: number;
  }

  const Gallery = ({ pictures, uniforms, tileWidth, gap }: GalleryProps) => {
    const galleryGroup = new THREE.Group();
    const tiles: { scale: THREE.Vector3 }[] = [];
    const totalTileWidth = tileWidth + gap;
    const pickHelper = PickHelper({ canvas });
    const minimap = Minimap({ count: pictures.length });

    // Handle scroll
    gsap.registerPlugin(Observer);
    Observer.create({
      type: 'wheel, touch, pointer',
      onClick: () => {
        const picked = pickHelper.pick(
          scene,
          camera as THREE.PerspectiveCamera,
          galleryGroup.children,
        );
        if (picked) {
          clicked = galleryGroup.children.findIndex(
            (i) => i.uuid === picked.uuid,
          );
          // Scroll to middle point of clicked image
          scrollPosition = (clicked - 0.5) / (gallery.children.length - 1);
        } else {
          clicked = null;
        }
      },
      onDown: ({ deltaY }) => {
        scrollPosition += deltaY / window.innerWidth;
      },
      onUp: ({ deltaY }) => {
        scrollPosition += deltaY / window.innerWidth;
      },
      onDrag: ({ deltaX }) => {
        scrollPosition -= deltaX / window.innerWidth;
      },
      tolerance: window.innerWidth / 100,
    });

    for (let i = 0; i < pictures.length; i++) {
      let position = new THREE.Vector3(i * totalTileWidth, 0, 0);
      tiles.push({ scale: new THREE.Vector3(tileWidth, 1, 1) });

      galleryGroup.add(
        Image({
          url: pictures[i].src,
          index: i,
          uniforms: {
            ...uniforms,
            scale: { value: tiles[i].scale },
          },
          position,
          scale: tiles[i].scale,
        }),
      );
    }

    function animationLoop({ time: delta }: BaseSceneState) {
      scrollPosition = clamp(scrollPosition, 0, 1);

      // Reset clicked if user scrolls away from it
      if (
        clicked !== null &&
        Math.abs(scrollPosition - clicked / galleryGroup.children.length) >
          1.75 / galleryGroup.children.length
      ) {
        clicked = null;
      }

      for (let i = 0; i < galleryGroup.children.length; i++) {
        let picture = galleryGroup.children[i];
        let y = curve(
          i / pictures.length - 1.5 / pictures.length,
          4 / pictures.length,
          0,
          scrollPosition,
        );

        // Offset images based on scroll position
        // Images are offset half of the additional space relative to clicked index
        let clickedOffset =
          clicked !== null && clicked !== i
            ? clicked < i
              ? (1 - tileWidth) / 2
              : -(1 - tileWidth) / 2
            : 0;

        // Update position & scale
        picture.position.x = damp(
          picture.position.x,
          (i - scrollPosition * (pictures.length - 1)) * totalTileWidth +
            clickedOffset,
          dampingFactor,
          delta,
        );
        let scaleY = damp(picture.scale.y, 1 + y / 4, dampingFactor, delta);
        let scaleX = damp(
          picture.scale.x,
          clicked === i ? 1 : tileWidth,
          dampingFactor,
          delta,
        );
        (picture.scale.y = scaleY), (picture.scale.x = scaleX);
        (tiles[i].scale.y = scaleY), (tiles[i].scale.x = scaleX);
      }

      // Update minimap
      minimap.children.forEach((line, i) => {
        const y = curve(
          i / minimap.children.length - 1.5 / minimap.children.length,
          4 / minimap.children.length,
          0,
          scrollPosition,
        );
        line.scale.y = damp(
          line.scale.y,
          Math.max(0.5, y),
          dampingFactor,
          delta,
        );
      });
    }

    registerRenderCallback(animationLoop);
    return { gallery: galleryGroup, minimap };
  };

  const pictures = [
    { src: '/assets/projects/benji-demo-1.webp' },
    { src: '/assets/projects/3d-audio-visualizer-demo-1.webp' },
    { src: '/assets/projects/stacks-demo-1.webp' },
    { src: '/assets/projects/task-manager-demo-1.webp' },
    { src: '/assets/projects/space-jams.png' },
    { src: '/assets/projects/ulam.png' },
    { src: '/assets/projects/runner.png' },
  ];

  const { gallery, minimap } = Gallery({
    pictures,
    uniforms,
    tileWidth: 0.3,
    gap: 0.025,
  });

  scene.add(gallery);
  scene.add(minimap);
</script>
