---
import SceneLayout from 'src/layouts/SceneLayout.astro';
---

<SceneLayout title="SpaceJams" audio />

<script>
  import * as THREE from 'three';
  import BaseScene, { isReady } from '@lib/sceneController';
  import { loadGLTF } from '@lib/textureLoader';
  import { usePlayer } from '@components/Player';
  import type { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
  import vertexShader from './shaders/vertex.vs.glsl';
  import fragmentShader from './shaders/fragment.fs.glsl';
  import bodyVertexShader from './shaders/body.vs.glsl';
  import bodyFragmentShader from './shaders/body.fs.glsl';
  import skyVertexShader from './shaders/sky.vs.glsl';
  import skyFragmentShader from './shaders/sky.fs.glsl';
  import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';
  import { SSRPass } from 'three/examples/jsm/postprocessing/SSRPass';
  import { fibonacciSphereV3 } from '@utils/geometry';
  import { isMobile, isSafari } from '@utils/utils';

  /* -------------------------------- */
  /*          Setup & Globals         */
  /* -------------------------------- */
  const mobile = isMobile() || isSafari();
  const defaultCameraPosition = [0, 0, 2.75];
  const skyModeCameraPosition = [0, 4, 20];
  const settings = {
    skyMode: false,
    enableSSR: false,
    enableBloom: true,
    bloomStrength: 0.55,
    bloomThreshold: 0.3,
    bloomRadius: 0.6,
    starLayers: mobile ? 2 : 5,
    starGridSize: mobile ? 4 : 8,
  };

  const canvas = document.getElementById('app-view')! as HTMLCanvasElement;
  const { state, registerRenderCallback, utils, setSceneHook } = BaseScene({
    canvas,
    settings: {
      cameraPosition: defaultCameraPosition,
      far: 3000,
    },
  });
  const { scene, renderer, camera, composer, uniforms, orbitControls } = state;
  const { gui, resetCamera, updateSetting } = utils;

  // Load models
  interface Assets {
    rockColorMap: THREE.Texture;
    rockDisplacementMap: THREE.Texture;
    rockRoughnessMap: THREE.Texture;
    rockAoMap: THREE.Texture;
    rockNormalMap: THREE.Texture;
    model?: GLTF;
  }
  let assets = loadAssets();

  function loadAssets() {
    let assets: Assets = {
      rockColorMap: new THREE.TextureLoader().load(
        '/assets/textures/ground_color_1k.jpg',
      ),
      rockDisplacementMap: new THREE.TextureLoader().load(
        '/assets/textures/ground_height_1k.png',
      ),
      rockRoughnessMap: new THREE.TextureLoader().load(
        '/assets/textures/ground_roughness_1k.jpg',
      ),
      rockAoMap: new THREE.TextureLoader().load(
        '/assets/textures/ground_ao_1k.jpg',
      ),
      rockNormalMap: new THREE.TextureLoader().load(
        '/assets/textures/ground_normal_opengl_1k.png',
      ),
    };
    [
      assets.rockColorMap,
      assets.rockDisplacementMap,
      assets.rockRoughnessMap,
      assets.rockAoMap,
      assets.rockNormalMap,
    ].forEach((t) => {
      if (!(t instanceof THREE.Texture)) return;
      t.wrapS = THREE.RepeatWrapping;
      t.wrapT = THREE.RepeatWrapping;
      t.repeat.set(10, 10);
      t.colorSpace = THREE.LinearSRGBColorSpace;
    });

    loadGLTF('/assets/models/speakerV2.glb', function (model) {
      assets['model'] = model;
      Scene();
    });

    return assets as Assets;
  }

  /* -------------------------------- */
  /*                Scene             */
  /* -------------------------------- */
  function Scene() {
    let bloomPass: UnrealBloomPass;
    let ssrPass: SSRPass;

    uniforms.uStarLayerCount = { value: settings.starLayers };
    uniforms.uGridScale = { value: settings.starGridSize };

    let speaker: THREE.Object3D, sky: THREE.Mesh;
    let rock: THREE.Mesh;
    let points: THREE.Points, points2: THREE.Points;

    function updateDefaultCameraPosition() {
      const [x, y, z] = settings.skyMode
        ? skyModeCameraPosition
        : defaultCameraPosition;
      updateSetting('cameraPosition', [x, y, z]);
      resetCamera();
    }
    updateDefaultCameraPosition();

    function setupGUI() {
      gui.addInput(settings, 'skyMode').on('change', () => {
        if (settings.skyMode) {
          orbitControls.enabled = false;
          updateSetting('orbitControls', false);
          gui.refresh();
        }
        updateDefaultCameraPosition();
      });

      gui
        .addInput(settings, 'starGridSize', { min: 0, max: 20, step: 1 })
        .on('change', ({ value }) => {
          value = Math.floor(value);
          uniforms.uGridScale.value = value;
        });

      gui
        .addInput(settings, 'starLayers', { min: 0, max: 20, step: 1 })
        .on('change', ({ value }) => {
          value = Math.floor(value);
          uniforms.uStarLayerCount.value = value;
        });

      // TODO
      // gui.addInput(settings, 'enableSSR').on('change', ({ value }) => {
      //   if (value) {
      //     composer.removePass(ssrPass);
      //   } else {
      //     composer.addPass(ssrPass);
      //   }
      // });
    }

    function postProcessing() {
      bloomPass = new UnrealBloomPass(
        new THREE.Vector2(window.innerWidth, window.innerHeight),
        settings.bloomStrength,
        settings.bloomRadius,
        settings.bloomThreshold,
      );

      ssrPass = new SSRPass({
        renderer,
        scene,
        camera,
        width: window.innerWidth,
        height: window.innerHeight,
        groundReflector: null,
        selects: null,
      });
      ssrPass.thickness = 0.018;
      ssrPass.maxDistance = 0.1;
      ssrPass.output = SSRPass.OUTPUT.Beauty;
      ssrPass.opacity = 0.9;

      // composer.addPass(ssrPass);
      // composer.addPass(bloomPass);
    }

    function handleEvents() {
      // Handle resize
      setSceneHook('onResize', () => {
        // TODO
      });
    }

    function animationLoop() {
      // Move camera
      if (!orbitControls.enabled) {
        camera.position.x +=
          (uniforms.uMouse.value.x / 10 - camera.position.x) * 0.03;
        camera.position.y +=
          (-uniforms.uMouse.value.y / 20 - camera.position.y + 0.75) * 0.1;
        camera.lookAt(speaker.position);
      }
    }

    const plateWorldPosition = new THREE.Vector3();
    const plateQuaternion = new THREE.Quaternion();
    const plateScale = new THREE.Vector3();

    /* ---------- Lights ---------- */
    const ambientLight = new THREE.AmbientLight(0x464646, 0.2);
    scene.add(ambientLight);

    const spotLight = new THREE.SpotLight(0xffffff, 0.6);
    spotLight.castShadow = true;
    spotLight.position.set(-150, 150, 50);
    scene.add(spotLight);

    const spotLight2 = new THREE.SpotLight(0x262656, 5);
    spotLight2.position.set(100, 100, -50);
    spotLight2.castShadow = true;
    spotLight2.shadow.mapSize.width = 1024;
    spotLight2.shadow.mapSize.height = 1024;
    scene.add(spotLight2);

    /* ---------- Geometry ---------- */
    speaker = assets.model!.scene.children[1];

    rock = assets.model!.scene.children[0] as THREE.Mesh;
    rock.position.y += 0.02;
    rock.material = new THREE.MeshStandardMaterial({
      map: assets.rockColorMap,
      displacementBias: -0.5,
      normalMap: assets.rockNormalMap,
      roughnessMap: assets.rockRoughnessMap,
      aoMap: assets.rockAoMap,
    });

    let body = speaker.children[1] as THREE.Mesh;
    body.material = new THREE.ShaderMaterial({
      uniforms,
      vertexShader: bodyVertexShader,
      fragmentShader: bodyFragmentShader,
    });

    body.scale.multiply(new THREE.Vector3(1.01, 1.01, 1.01));
    speaker.castShadow = true;
    speaker.receiveShadow = true;
    scene.add(speaker);
    scene.add(rock);

    const skyGeometry = new THREE.IcosahedronGeometry(1000, 5);
    const skyMaterial = new THREE.ShaderMaterial({
      uniforms: uniforms,
      vertexShader: skyVertexShader,
      fragmentShader: skyFragmentShader,
      depthWrite: false,
      side: THREE.BackSide,
    });

    sky = new THREE.Mesh(skyGeometry, skyMaterial);
    sky.position.set(0, 0, -110);
    sky.rotation.y -= Math.PI / 2;
    scene.add(sky);

    const material = new THREE.ShaderMaterial({
      uniforms: uniforms,
      vertexShader,
      fragmentShader,
      transparent: true,
      depthWrite: false,
      blending: THREE.AdditiveBlending,
    });

    const plate = speaker.getObjectByName('PLATE')!;
    plate.getWorldPosition(plateWorldPosition);
    plate.getWorldQuaternion(plateQuaternion);
    plate.getWorldScale(plateScale);

    const mesh = new THREE.Mesh(new THREE.SphereGeometry(32, 50, 50), material);
    mesh.position.copy(plateWorldPosition);
    mesh.quaternion.copy(plateQuaternion);
    mesh.scale.copy(plateScale);
    mesh.position.add(plate.position);
    mesh.scale.set(0.006, 0.003, 0.006);
    mesh.position.add(new THREE.Vector3(0.5, 0.285, 0.075));
    mesh.rotateX(-Math.PI / 2);

    points = new THREE.Points(
      new THREE.BufferGeometry().setFromPoints(fibonacciSphereV3(10000, 32)),
      material,
    );
    points.scale.copy(mesh.scale);
    points.position.copy(mesh.position);
    points.quaternion.copy(mesh.quaternion);

    const mesh2 = new THREE.Mesh(
      new THREE.SphereGeometry(32, 50, 50),
      material,
    );
    mesh2.position.copy(plateWorldPosition);
    mesh2.quaternion.copy(plateQuaternion);
    mesh2.scale.copy(plateScale);
    mesh2.position.add(new THREE.Vector3(-0.51, 0.285, -0.05));
    mesh2.scale.set(0.006, 0.003, 0.006);
    mesh2.rotateX(Math.PI / 2);

    points2 = new THREE.Points(
      new THREE.BufferGeometry().setFromPoints(fibonacciSphereV3(10000, 32)),
      material,
    );
    points2.scale.copy(mesh2.scale);
    points2.position.copy(mesh2.position);
    points2.quaternion.copy(mesh2.quaternion);

    scene.add(mesh);
    scene.add(mesh2);
    scene.add(points);
    scene.add(points2);

    postProcessing();
    setupGUI();
    handleEvents();
    registerRenderCallback(animationLoop);
    isReady.set(true);
  }
</script>
