---
import SceneLayout from 'src/layouts/SceneLayout.astro';
---

<SceneLayout title="Boids" />

<script>
  import * as THREE from 'three';
  import BaseScene, { BaseSceneState, isReady } from '@lib/sceneController';
  import { rand } from '@utils/math';
  import SpatialGrid from '@lib/SpatialGrid';
  import { createDebugBounds } from '@lib/helpers';
  import { loadGLTF } from '@lib/textureLoader';
  import * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils';
  import lightVertexShader from './shaders/lightShader.vs.glsl?raw';
  import lightFragmentShader from './shaders/lightShader.fs.glsl?raw';

  /* ---------------------------------------------- */
  /*                 Setup & Globals                */
  /* ---------------------------------------------- */
  const canvas = document.getElementById('app_view')! as HTMLCanvasElement;
  const { state, registerRenderCallback, unregisterRenderCallback, utils } =
    BaseScene({
      canvas,
      settings: { cameraPosition: [0, 0, 100], orbitControls: true },
    });

  const { scene, renderer, camera, uniforms } = state;
  const { gui } = utils;

  const BOUNDS = { width: 100, height: 100, depth: 100 };
  const BOUNDS_RADIUS = new THREE.Vector3(0, 0, 0).distanceTo(
    new THREE.Vector3().addScalar(
      Math.max(BOUNDS.width, BOUNDS.height, BOUNDS.depth) / 2,
    ),
  );

  const NUM_BOIDS = 200;
  const BOID_SPEED = 1.5;
  const BOID_ACCELERATION = BOID_SPEED / 10;
  const BOID_FORCE_MAX = BOID_ACCELERATION / 10.0;
  const BOID_FORCE_SEEK = 5;
  const BOID_FORCE_ALIGNMENT = 10;
  const BOID_FORCE_SEPARATION = 20;
  const BOID_FORCE_COHESION = 10;
  const BOID_FORCE_WANDER = 3;

  const SPEED_MIN = 2;
  const SPEED_MAX = 3;

  const hashGrid = new SpatialGrid<Boid>({
    bounds: [
      new THREE.Vector3(-BOUNDS.width / 2, 0, -BOUNDS.depth / 2),
      new THREE.Vector3(BOUNDS.width / 2, 0, BOUNDS.depth / 2),
    ],
    dimensions: [10, 10],
  });
  const boids: Boid[] = [];

  const settings = {
    debug: {
      boidRadius: false,
      leaderRadius: false,
    },
    timeMultiplier: 1,
    boidRadiusMultiplier: 3,
  };

  /* ---------------------------------------------- */
  /*                       Scene                    */
  /* ---------------------------------------------- */
  let bodyGeometry: THREE.InstancedBufferGeometry;
  let lightGeometry: THREE.BufferGeometry;

  let bodyMaterial = new THREE.MeshBasicMaterial({ color: 0x6a4219 });
  let bodyPartsMaterial = new THREE.MeshBasicMaterial({ color: 0x211408 });
  let instancedBodyMesh: THREE.InstancedMesh;
  let instancedWings: THREE.InstancedMesh;

  function loadAssets() {
    loadGLTF('/assets/models/firefly.glb', function (model) {
      lightGeometry = (model.scene.children[1] as THREE.Mesh).geometry; //new THREE.InstancedBufferGeometry().copy((model.scene.children[1] as THREE.Mesh).geometry);

      const bodyBufferGeometry = BufferGeometryUtils.mergeBufferGeometries(
        model.scene.children[0].children.map((c) => (c as THREE.Mesh).geometry),
      );

      // TODO: separate body parts
      bodyGeometry = new THREE.InstancedBufferGeometry().copy(
        bodyBufferGeometry,
      );

      const wingsMergedGeometry = [
        model.scene.children[2],
        model.scene.children[3],
      ].reduce((prev, cur) => {
        const geometries = (cur as THREE.Group).children.map(
          (c) => (c as THREE.Mesh).geometry,
        );
        prev.push(...geometries);
        return prev;
      }, [] as THREE.BufferGeometry[]);

      const wingsBufferGeometry =
        BufferGeometryUtils.mergeBufferGeometries(wingsMergedGeometry);

      instancedWings = new THREE.InstancedMesh(
        wingsBufferGeometry,
        bodyPartsMaterial,
        NUM_BOIDS + 1,
      );
      instancedBodyMesh = new THREE.InstancedMesh(
        bodyGeometry,
        bodyMaterial,
        NUM_BOIDS + 1,
      );
      instancedBodyMesh.instanceMatrix.setUsage(THREE.DynamicDrawUsage);

      scene.add(instancedBodyMesh);
      scene.add(instancedWings);

      init();
      isReady.set(true);
    });
  }

  loadAssets();

  interface BoidParams {
    index: number;
    speedMin: number;
    speedMax: number;
    speed: number;
    maxSteeringForce: number;
    acceleration: number;
    color: number;
  }

  class Boid {
    public group: THREE.Group;
    public position: THREE.Vector3;
    public direction: THREE.Vector3;
    public velocity: THREE.Vector3;
    private maxSteeringForce: number;
    public maxSpeed: number;
    public acceleration: number;
    public radius: number; // (used for collision detection)
    private wanderAngle: number;
    public hashPosition: [number, number]; // cur index of hash grid
    // maybe add prev position ?
    public index: number;

    constructor({
      speedMin,
      speedMax,
      speed,
      maxSteeringForce,
      acceleration,
      color,
      index,
    }: BoidParams) {
      // Initialize boid, give it a random initial position and direction
      this.index = index;
      this.position = new THREE.Vector3(
        rand(-BOUNDS.width / 2, BOUNDS.width / 2),
        rand(-BOUNDS.height / 4, BOUNDS.height / 4),
        rand(-BOUNDS.depth / 2, BOUNDS.depth / 2),
      );

      this.group = new THREE.Group();
      this.group.position.set(
        this.position.x,
        this.position.y,
        this.position.z,
      );

      let lightMaterial = new THREE.ShaderMaterial({
        uniforms: {
          ...uniforms,
          index: { value: this.index },
          randomColor: {
            value: new THREE.Color(Math.random(), Math.random(), Math.random()),
          },
        },
        vertexShader: lightVertexShader,
        fragmentShader: lightFragmentShader,
      });
      const lightMesh = new THREE.Mesh(lightGeometry, lightMaterial);

      lightMesh.material.uniforms.index = { value: this.index };

      this.group.add(lightMesh);

      this.direction = new THREE.Vector3(rand(-1, 1), 0, rand(-1, 1));
      this.velocity = this.direction.clone();

      // Calculate the boid's speed and scale based on the provided parameters
      const speedMultiplier = rand(speedMin, speedMax);
      this.maxSteeringForce = maxSteeringForce * speedMultiplier;
      this.maxSpeed = speed * speedMultiplier;
      this.acceleration = acceleration * speedMultiplier;
      this.wanderAngle = 0;

      // Scale down based on speed multiplier
      const scale = 1.0 / speedMultiplier;
      this.radius = settings.boidRadiusMultiplier * scale;
      this.group.scale.setScalar(scale);
      this.group.updateMatrix();

      // Update instance matrix
      instancedBodyMesh.setMatrixAt(index, this.group.matrix);
      instancedWings.setMatrixAt(index, this.group.matrix);

      // Set hash position
      this.hashPosition = hashGrid.updateEntityPosition(this.group.uuid, this);
      scene.add(this.group);

      if (settings.debug.boidRadius) this.debug();
    }

    // Applies steering behavior and updates direction/velocity
    step(timeMs: number) {
      const localEntities = hashGrid.getLocalEntities(
        this.position,
        this.radius,
      );
      this.applySteering(localEntities);

      const frameVelocity = this.velocity.clone();
      frameVelocity.multiplyScalar(timeMs / 1000);
      this.group.position.add(frameVelocity);
      this.position = this.group.position;

      const direction = this.direction;
      const m = new THREE.Matrix4();
      m.lookAt(
        new THREE.Vector3(0, 0, 0),
        direction,
        new THREE.Vector3(0, 1, 0),
      );
      this.group.quaternion.setFromRotationMatrix(m);

      // Update hash grid
      this.hashPosition = hashGrid.updateEntityPosition(
        this.group.uuid,
        this,
        this.hashPosition,
      );

      // Update instance
      this.group.rotateY(Math.PI);
      this.group.updateMatrix();
      instancedBodyMesh.setMatrixAt(this.index, this.group.matrix);
      instancedWings.setMatrixAt(this.index, this.group.matrix);
    }

    // Apply steering behaviors
    applySteering(localEntities: Boid[]) {
      const steeringForce = new THREE.Vector3(0, 0, 0);
      const forces = [
        this.applySeek(new THREE.Vector3(0, BOUNDS.height / 4, 0)),
        this.applyAlignment(localEntities),
        this.applySeparation(localEntities),
        this.applyCohesion(localEntities),
        this.avoidWalls(true), // smoothly avoid bounds
      ];

      for (const f of forces) {
        steeringForce.add(f);
      }

      // Limit force & velocity
      if (steeringForce.length() > this.maxSteeringForce) {
        steeringForce.normalize();
        steeringForce.multiplyScalar(this.maxSteeringForce);
      }

      this.velocity.add(steeringForce);

      if (this.velocity.length() > this.maxSpeed) {
        this.velocity.normalize();
        this.velocity.multiplyScalar(this.maxSpeed);
      }

      // Update direction
      this.direction = this.velocity.clone();
      this.direction.normalize();
    }

    // Calculates desired separation, steer it away if it gets too close
    applySeparation(localEntities: Boid[]) {
      const force = new THREE.Vector3(0, 0, 0);
      if (!localEntities.length) return force;

      for (const entity of localEntities) {
        const distanceToEntity = Math.max(
          0.001,
          entity.position.distanceTo(this.position) -
            1.5 * (this.radius + entity.radius),
        );

        const multiplier =
          (BOID_FORCE_SEPARATION / distanceToEntity) *
          (this.radius + entity.radius);
        const directionFromEntity = new THREE.Vector3().subVectors(
          this.position,
          entity.position,
        );
        directionFromEntity.normalize();
        force.add(directionFromEntity.multiplyScalar(multiplier));
      }

      return force;
    }

    // Calculates average heading of neighbors and steer towards it
    applyAlignment(localEntities: Boid[]) {
      const force = new THREE.Vector3(0, 0, 0);

      for (let entity of localEntities) {
        force.add(entity.direction);
      }

      force.normalize();
      force.multiplyScalar(BOID_FORCE_ALIGNMENT);
      return force;
    }

    // Calculates distance to bounds and avoids them
    avoidWalls(smooth = false, wallSeparationForce = 10) {
      const position = this.group.position.clone();
      const force = new THREE.Vector3(0, 0, 0);

      // Calculate the distance to nearest wall
      const xDistance = BOUNDS.width / 2 - Math.abs(position.x);
      const yDistance = BOUNDS.height / 2 - Math.abs(position.y);
      const zDistance = BOUNDS.depth / 2 - Math.abs(position.z);

      const minDist = 0.5 + this.radius;

      let multiplier = 0;
      let sign = 1;
      let wall: THREE.Vector3;
      let directionFromWall = new THREE.Vector3();

      const calculateMultiplier = (distance: number) =>
        wallSeparationForce * distance;

      // Avoid width bounds
      if (xDistance <= minDist) {
        multiplier = calculateMultiplier(xDistance);
        sign = position.x >= 0 ? 1 : -1;
        wall = new THREE.Vector3(
          (sign * BOUNDS.width) / 2,
          position.y,
          position.z,
        );
        directionFromWall = new THREE.Vector3().subVectors(position, wall);
      }

      // Avoid height bounds
      if (yDistance <= minDist) {
        multiplier = calculateMultiplier(yDistance);
        sign = position.y >= 0 ? 1 : -1;
        wall = new THREE.Vector3(
          position.x,
          (sign * BOUNDS.height) / 2,
          position.z,
        );
        directionFromWall = new THREE.Vector3().subVectors(position, wall);
      }

      // Avoid depth bounds
      if (zDistance <= minDist) {
        multiplier = calculateMultiplier(zDistance);
        sign = position.z >= 0 ? 1 : -1;
        wall = new THREE.Vector3(
          position.x,
          position.y,
          (sign * BOUNDS.depth) / 2,
        );
        directionFromWall = new THREE.Vector3().subVectors(position, wall);
      }

      directionFromWall.normalize();
      force.add(directionFromWall.multiplyScalar(multiplier));

      // bonk against bound
      if (!smooth && directionFromWall.length() > 0) {
        this.velocity.add(directionFromWall);
      }
      return force;
    }

    // Calculates average position of neighbors and steer towards it
    applyCohesion(localEntities: Boid[]) {
      const force = new THREE.Vector3(0, 0, 0);
      if (!localEntities.length) return force;

      const averagePosition = new THREE.Vector3(0, 0, 0);
      for (const entity of localEntities) {
        averagePosition.add(entity.position);
      }
      averagePosition.multiplyScalar(1 / localEntities.length);

      const directionToTarget = averagePosition.clone().sub(this.position);
      directionToTarget.normalize();
      directionToTarget.multiplyScalar(BOID_FORCE_COHESION);

      return directionToTarget;
    }

    applySeek(target: THREE.Vector3, seekMinRadius = 50) {
      const distance =
        Math.max(
          0,
          (this.position.distanceTo(target) - seekMinRadius) / BOUNDS_RADIUS,
        ) ** 2;

      const direction = target.clone().sub(this.position).normalize();
      const force = direction.multiplyScalar(BOID_FORCE_SEEK * distance);

      return force;
    }

    applyWander() {}

    debug() {
      const wireframe = new THREE.WireframeGeometry(
        new THREE.SphereGeometry(this.radius),
      );

      const helper = new THREE.LineSegments(wireframe);
      (helper.material as THREE.Material).depthTest = false;
      (helper.material as THREE.Material).opacity = 0.25;
      (helper.material as THREE.Material).transparent = true;

      this.group.add(helper);
    }
  }

  class BoidLeader extends Boid {
    public influenceRadius: number;

    constructor(params: BoidParams) {
      super(params);
      this.group.position.set(0, 0, 0);
      this.position = this.group.position;
      this.influenceRadius = 15;
      this.hashPosition = hashGrid.updateEntityPosition(
        this.group.uuid,
        this,
        this.hashPosition,
      );
      if (settings.debug.leaderRadius) this.debug();
    }
  }

  function createBoids() {
    for (let i = 0; i < NUM_BOIDS; i++) {
      const f = new Boid({
        index: i,
        speedMin: SPEED_MIN,
        speedMax: SPEED_MAX,
        speed: BOID_SPEED,
        maxSteeringForce: BOID_FORCE_MAX,
        acceleration: BOID_ACCELERATION,
        color: 0xc4c4c4,
      });
      boids.push(f);
    }

    // Create leader
    const leader = new BoidLeader({
      index: NUM_BOIDS,
      speedMin: SPEED_MIN,
      speedMax: SPEED_MAX,
      speed: BOID_SPEED,
      maxSteeringForce: BOID_FORCE_MAX,
      acceleration: BOID_ACCELERATION,
      color: 0xff0000,
    });

    boids.push(leader);
  }

  const boundsHelper = createDebugBounds([
    BOUNDS.width,
    BOUNDS.height,
    BOUNDS.depth,
  ]);

  function setupGUI() {
    gui.addInput(settings, 'timeMultiplier', {
      min: 0.05,
      max: 500,
      step: 0.01,
    });
  }
  setupGUI();

  function animationLoop({ time }: BaseSceneState) {
    for (let i = 0; i < boids.length; i++) {
      boids[i].step(time * settings.timeMultiplier);
    }
    instancedBodyMesh.instanceMatrix.needsUpdate = true;
    instancedWings.instanceMatrix.needsUpdate = true;
  }

  function init() {
    createBoids();

    const leader = boids[boids.length - 1];
    scene.add(boundsHelper);
    registerRenderCallback(animationLoop);
  }
</script>
