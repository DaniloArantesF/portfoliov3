---
import SceneLayout from 'src/layouts/SceneLayout.astro';
---

<SceneLayout title="FireflyDisco" audio />

<script>
  import * as THREE from 'three';
  import BaseScene, { isReady } from '@lib/sceneController';
  import type { BaseSceneState } from '@lib/types';
  import SpatialGrid from '@lib/SpatialGrid';
  import { createDebugBounds } from '@lib/helpers';
  import { loadGLTF } from '@lib/textureLoader';
  import * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils';
  import lightVertexShader from './shaders/lightShader.vs.glsl';
  import lightFragmentShader from './shaders/lightShader.fs.glsl';
  import { damp } from 'three/src/math/MathUtils';
  import Boid, { BoidParams } from '@lib/Boid';
  import { usePlayer } from '@components/Player';

  /* -------------------------------- */
  /*          Setup & Globals         */
  /* -------------------------------- */
  const BOUNDS = { width: 500, height: 200, depth: 500 };
  const NUM_BOIDS = 100;
  const BOID_SPEED = 1.5;
  const BOID_ACCELERATION = BOID_SPEED / 10;
  const BOID_FORCE_MAX = BOID_ACCELERATION / 10.0;

  const SPEED_MIN = 2;
  const SPEED_MAX = 2.5;

  const canvas = document.getElementById('app-view')! as HTMLCanvasElement;
  const { state, registerRenderCallback, utils } = BaseScene({
    canvas,
    settings: { cameraPosition: [0, 50, 200], orbitControls: true },
  });

  const { scene, uniforms } = state;
  const { gui } = utils;

  let player = usePlayer.get();
  uniforms.uData = { value: player.buffer };

  const hashGrid = new SpatialGrid<Boid>({
    bounds: [
      new THREE.Vector3(-BOUNDS.width / 2, 0, -BOUNDS.depth / 2),
      new THREE.Vector3(BOUNDS.width / 2, 0, BOUNDS.depth / 2),
    ],
    dimensions: [100, 100],
  });

  const boids: Boid[] = [];
  const lights: LightEntity[] = [];

  const settings = {
    debug: {
      boidRadius: false,
      leaderRadius: true,
    },
    timeMultiplier: 1,
  };

  /* -------------------------------- */
  /*                Scene             */
  /* -------------------------------- */
  let bodyGeometry: THREE.BufferGeometry;
  let lightGeometry: THREE.BufferGeometry;
  let legsGeometry: THREE.BufferGeometry,
    lWingGeometry: THREE.BufferGeometry,
    rWingGeometry: THREE.BufferGeometry,
    eyesGeometry: THREE.BufferGeometry;
  let bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x6a4219 });
  let bodyPartsMaterial = new THREE.MeshPhongMaterial({ color: 0x211408 });

  let instancedBodyMesh: THREE.InstancedMesh;
  let instancedLegsMesh: THREE.InstancedMesh;
  let instancedLeftWing: THREE.InstancedMesh;
  let instancedRightWing: THREE.InstancedMesh;
  let instancedEyes: THREE.InstancedMesh;

  const instancedMeshes: THREE.InstancedMesh[] = [];

  interface FireflyParams extends BoidParams {
    color: THREE.Color;
  }

  class Firefly extends Boid {
    public color: THREE.Color;
    public frequency: number;
    private lightUniforms: { [key: string]: THREE.IUniform };
    public nearestLight: LightEntity | null;

    constructor(params: FireflyParams) {
      super(params);
      this.color = params.color;
      this.frequency = Math.random() * 3;

      this.lightUniforms = {
        ...uniforms,
        index: { value: this.index },
        color: {
          value: this.color,
        },
        frequency: {
          value: this.frequency,
        },
      };

      let lightMaterial = new THREE.ShaderMaterial({
        uniforms: this.lightUniforms,
        vertexShader: lightVertexShader,
        fragmentShader: lightFragmentShader,
      });

      const lightMesh = new THREE.Mesh(lightGeometry, lightMaterial);
      lightMesh.material.uniforms.index = { value: this.index };
      this.group.add(lightMesh);

      this.nearestLight = this.syncNearestLight();

      for (let j = 0; j < instancedMeshes.length; j++) {
        instancedMeshes[j].setMatrixAt(this.index, this.group.matrix);
      }

      scene.add(this.group);
    }

    // loop through lights, sync color and progressively sync frequency
    syncNearestLight() {
      let minDistance1 = Infinity;
      let minDistance2 = Infinity;
      let closestObject1 = null,
        closestObject2 = null;

      for (const light of lights) {
        const distance = light.position.distanceTo(this.position);
        if (distance < minDistance1) {
          minDistance2 = minDistance1;
          closestObject2 = closestObject1;
          minDistance1 = distance;
          closestObject1 = light;
        } else if (distance < minDistance2) {
          minDistance2 = distance;
          closestObject2 = light;
        }
      }

      if (closestObject1 && this.color !== closestObject1.color) {
        this.color.lerp(
          closestObject1.color,
          minDistance1 / (minDistance1 + minDistance2),
        );
        this.lightUniforms.color.value = this.color;
      }

      if (!closestObject1) return null;

      this.frequency = damp(
        this.frequency,
        closestObject1.frequencyIndex,
        1,
        state.clock.getElapsedTime(),
      );

      this.lightUniforms.frequency.value = this.frequency;
      return closestObject1;
    }

    step(timeMs: number) {
      this.syncNearestLight();
      super.step(timeMs);

      // Update firefly meshes
      for (let i = 0; i < instancedMeshes.length; i++) {
        instancedMeshes[i].setMatrixAt(this.index, this.group.matrix);
        instancedMeshes[i].instanceMatrix.needsUpdate = true;
      }
    }

    // Applies firefly specific steering behavior
    applySteering(localEntities: Boid[]) {
      let force = new THREE.Vector3();
      for (let i = 0; i < lights.length; i++) {
        force.add(this.applySeek(lights[i].position, 0.5));
      }
      super.applySteering(localEntities, force);
    }
  }

  class LightEntity {
    public position: THREE.Vector3;
    public frequencyIndex: number; // index of frequency
    public color: THREE.Color;
    public intensity: number;
    public distance: number;
    private light: THREE.PointLight;

    constructor(
      position: THREE.Vector3,
      frequencyIndex: number,
      color: THREE.Color,
    ) {
      this.position = position;
      this.frequencyIndex = frequencyIndex;
      this.color = color;
      this.intensity = 0.5;
      this.distance = 1.5 * BOUNDS.height;

      this.light = new THREE.PointLight(
        this.color,
        this.intensity,
        this.distance,
      );
      this.light.position.copy(this.position);

      scene.add(this.light);
      this.debug();
    }

    setIntensity(intensity: number) {
      this.intensity = intensity;
      this.light.intensity = this.intensity;
    }

    debug() {
      const lightHelper = new THREE.PointLightHelper(this.light, 2);
      scene.add(lightHelper);
    }
  }

  function createBoids() {
    for (let i = 0; i < NUM_BOIDS; i++) {
      const b = new Firefly({
        index: i,
        speedMin: SPEED_MIN,
        speedMax: SPEED_MAX,
        speed: BOID_SPEED,
        maxSteeringForce: BOID_FORCE_MAX,
        acceleration: BOID_ACCELERATION,
        color: new THREE.Color(1, 1, 1),
        bounds: BOUNDS,
        hashGrid,
      });
      boids.push(b);
    }
  }

  function setupGUI() {
    gui.addInput(settings, 'timeMultiplier', {
      min: 0.05,
      max: 500,
      step: 0.01,
    });
  }

  function animationLoop({ time }: BaseSceneState) {
    for (let i = 0; i < boids.length; i++) {
      boids[i].step(time * settings.timeMultiplier);
    }

    if (player.analyser) {
      player.analyser.getByteFrequencyData(player.buffer);
      uniforms.uData.value = player.buffer;
    }

    // Animate lights
    let bin = Math.floor(player.buffer.length / (lights.length + 1));
    for (let i = 0; i < lights.length; i++) {
      const value = uniforms.uData.value[i * bin] / 255;
      const targetIntensity = Math.max(1 - value, 0.7);
      const intensity = damp(lights[i].intensity, targetIntensity, 0.5, time);
      lights[i].setIntensity(intensity);
    }
  }

  function createLights() {
    const light1 = new LightEntity(
      new THREE.Vector3(0, BOUNDS.height / 3, -BOUNDS.depth / 4),
      1,
      new THREE.Color(1, 0, 0),
    );
    const light2 = new LightEntity(
      new THREE.Vector3(-BOUNDS.width / 4, BOUNDS.height / 3, BOUNDS.depth / 4),
      2,
      new THREE.Color(0, 1, 0),
    );
    const light3 = new LightEntity(
      new THREE.Vector3(BOUNDS.width / 4, BOUNDS.height / 3, BOUNDS.depth / 4),
      3,
      new THREE.Color(0, 0, 1),
    );

    const hemisphereLight = new THREE.HemisphereLight(0x262626, 0xc4c4c4, 0.55);
    scene.add(hemisphereLight);

    return { light1, light2, light3, hemisphereLight };
  }

  function init() {
    setupGUI();

    const plane = new THREE.PlaneGeometry(BOUNDS.width, BOUNDS.depth, 10, 10);
    const groundMaterial = new THREE.MeshLambertMaterial({ color: 0xc4c4c4 });
    const groundMesh = new THREE.Mesh(plane, groundMaterial);
    groundMesh.rotation.x -= Math.PI / 2;
    groundMesh.position.y = -BOUNDS.height / 2;

    const boundsHelper = createDebugBounds([
      BOUNDS.width,
      BOUNDS.height,
      BOUNDS.depth,
    ]);

    const { light1, light2, light3, hemisphereLight } = createLights();
    lights.push(light1, light2, light3);

    createBoids();

    scene.add(boundsHelper);
    scene.add(groundMesh);
    registerRenderCallback(animationLoop);
  }

  function loadAssets() {
    loadGLTF('/assets/models/firefly.glb', function (model) {
      lightGeometry = (model.scene.children[1] as THREE.Mesh).geometry;
      bodyGeometry = (model.scene.children[0].children[0] as THREE.Mesh)
        .geometry;
      lWingGeometry = BufferGeometryUtils.mergeBufferGeometries(
        (model.scene.children[2] as THREE.Group).children.map(
          (c) => (c as THREE.Mesh).geometry,
        ),
      );
      rWingGeometry = BufferGeometryUtils.mergeBufferGeometries(
        (model.scene.children[3] as THREE.Group).children.map(
          (c) => (c as THREE.Mesh).geometry,
        ),
      );
      eyesGeometry = (model.scene.children[0].children[3] as THREE.Mesh)
        .geometry;
      legsGeometry = BufferGeometryUtils.mergeBufferGeometries([
        (model.scene.children[0].children[1] as THREE.Mesh).geometry,
        (model.scene.children[0].children[2] as THREE.Mesh).geometry,
      ]);

      legsGeometry.scale(0.7, 0.7, 0.7);
      lWingGeometry.scale(0.9, 0.9, 0.9);
      rWingGeometry.scale(0.9, 0.9, 0.9);

      instancedBodyMesh = new THREE.InstancedMesh(
        bodyGeometry,
        bodyMaterial,
        NUM_BOIDS,
      );
      instancedLegsMesh = new THREE.InstancedMesh(
        legsGeometry,
        bodyPartsMaterial,
        NUM_BOIDS,
      );
      instancedLeftWing = new THREE.InstancedMesh(
        lWingGeometry,
        bodyPartsMaterial,
        NUM_BOIDS,
      );
      instancedRightWing = new THREE.InstancedMesh(
        rWingGeometry,
        bodyPartsMaterial,
        NUM_BOIDS,
      );
      instancedEyes = new THREE.InstancedMesh(
        eyesGeometry,
        bodyPartsMaterial,
        NUM_BOIDS,
      );

      instancedMeshes.push(
        instancedBodyMesh,
        instancedLegsMesh,
        instancedRightWing,
        instancedLeftWing,
        instancedEyes,
      );

      for (let i = 0; i < instancedMeshes.length; i++) {
        instancedMeshes[i].instanceMatrix.setUsage(THREE.DynamicDrawUsage);
        scene.add(instancedMeshes[i]);
      }

      init();
      isReady.set(true);
    });
  }

  loadAssets();
</script>
