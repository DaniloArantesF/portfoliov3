---
import SceneLayout from 'src/layouts/SceneLayout.astro';
---

<SceneLayout audio slug="water"/>

<script>
  import * as THREE from 'three';
  import BaseScene, { isReady } from '@lib/sceneController';
  import vertexShader from './shaders/vertex.vs.glsl';
  import fragmentShader from './shaders/fragment.fs.glsl';
  import { usePlayer } from '@components/Player';

  /* -------------------------------- */
  /*          Setup & Globals         */
  /* -------------------------------- */
  const canvas = document.getElementById('app-view')! as HTMLCanvasElement;
  const { state, registerRenderCallback } = BaseScene({
    canvas,
    settings: {
      cameraPosition: [0, 7, 7],
      orbitControls: true,
      gridHelper: true,
    },
  });
  const { scene } = state;

  /* ---------- Audio ---------- */
  let player = usePlayer.get();

  const settings = {
    color1: new THREE.Color(1, 0, 0),
    color2: new THREE.Color(0, 0, 1),
    foldFrequency: 0.03,
    foldsHeight: 5.5,
    waveFrequency: 0.5,
    waveAmplitude: 0.1,
    waveDirection: [-0.5, 0.5],
  };

  const uniforms = {
    ...state.uniforms,
    ...THREE.UniformsUtils.merge([
      THREE.UniformsLib['fog'],
      THREE.UniformsLib['lights'],
      {
        normalSampler: { value: null },
        mirrorSampler: { value: null },
        alpha: { value: 1.0 },
        time: { value: 0.0 },
        size: { value: 1.0 },
        distortionScale: { value: 20.0 },
        textureMatrix: { value: new THREE.Matrix4() },
        sunColor: { value: new THREE.Color(0x7f7f7f) },
        sunDirection: { value: new THREE.Vector3(0.70707, 0.70707, 0) },
        eye: { value: new THREE.Vector3() },
        waterColor: { value: new THREE.Color(0x555555) },
      },
    ]),
  };

  /* -------------------------------- */
  /*                Scene             */
  /* -------------------------------- */
  const geometry = new THREE.BoxGeometry(5, 2, 5, 100, 5, 100);
  const material = new THREE.ShaderMaterial({
    uniforms,
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    side: THREE.FrontSide,
    fog: true,
  });
  const textureWidth = 512;
  const textureHeight = 512;

  const clipBias = 0.0;
  const alpha = 1.0;
  const time = 0.0;
  const normalSampler = null;
  const sunDirection = new THREE.Vector3(0.70707, 0.70707, 0.0);
  const sunColor = new THREE.Color(0xffffff);
  const waterColor = new THREE.Color(0x7f7f7f);
  const eye = new THREE.Vector3(0, 0, 0);
  const distortionScale = 20.0;
  const side = THREE.FrontSide;
  const fog = false;

  const mirrorPlane = new THREE.Plane();
  const normal = new THREE.Vector3();
  const mirrorWorldPosition = new THREE.Vector3();
  const cameraWorldPosition = new THREE.Vector3();
  const rotationMatrix = new THREE.Matrix4();
  const lookAtPosition = new THREE.Vector3(0, 0, -1);
  const clipPlane = new THREE.Vector4();

  const view = new THREE.Vector3();
  const target = new THREE.Vector3();
  const q = new THREE.Vector4();

  const textureMatrix = new THREE.Matrix4();

  const mirrorCamera = new THREE.PerspectiveCamera();

  const renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight);

  material.uniforms['mirrorSampler'].value = renderTarget.texture;
  material.uniforms['textureMatrix'].value = textureMatrix;
  material.uniforms['alpha'].value = alpha;
  material.uniforms['time'].value = time;
  material.uniforms['normalSampler'].value = normalSampler;
  material.uniforms['sunColor'].value = sunColor;
  material.uniforms['waterColor'].value = waterColor;
  material.uniforms['sunDirection'].value = sunDirection;
  material.uniforms['distortionScale'].value = distortionScale;
  material.uniforms['eye'].value = eye;

  const mesh = new THREE.Mesh(geometry, material);
  scene.add(mesh);

  mesh.onBeforeRender = function (renderer, scene, camera) {
    camera = camera as THREE.PerspectiveCamera;

    mirrorWorldPosition.setFromMatrixPosition(mesh.matrixWorld);
    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);

    rotationMatrix.extractRotation(mesh.matrixWorld);

    normal.set(0, 0, 1);
    normal.applyMatrix4(rotationMatrix);

    view.subVectors(mirrorWorldPosition, cameraWorldPosition);

    // Avoid rendering when mirror is facing away

    if (view.dot(normal) > 0) return;

    view.reflect(normal).negate();
    view.add(mirrorWorldPosition);

    rotationMatrix.extractRotation(camera.matrixWorld);

    lookAtPosition.set(0, 0, -1);
    lookAtPosition.applyMatrix4(rotationMatrix);
    lookAtPosition.add(cameraWorldPosition);

    target.subVectors(mirrorWorldPosition, lookAtPosition);
    target.reflect(normal).negate();
    target.add(mirrorWorldPosition);

    mirrorCamera.position.copy(view);
    mirrorCamera.up.set(0, 1, 0);
    mirrorCamera.up.applyMatrix4(rotationMatrix);
    mirrorCamera.up.reflect(normal);
    mirrorCamera.lookAt(target);

    mirrorCamera.far = (camera as THREE.PerspectiveCamera).far; // Used in WebGLBackground

    mirrorCamera.updateMatrixWorld();
    mirrorCamera.projectionMatrix.copy(camera.projectionMatrix);

    // Update the texture matrix
    textureMatrix.set(
      0.5,
      0.0,
      0.0,
      0.5,
      0.0,
      0.5,
      0.0,
      0.5,
      0.0,
      0.0,
      0.5,
      0.5,
      0.0,
      0.0,
      0.0,
      1.0,
    );
    textureMatrix.multiply(mirrorCamera.projectionMatrix);
    textureMatrix.multiply(mirrorCamera.matrixWorldInverse);

    // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html
    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf
    mirrorPlane.setFromNormalAndCoplanarPoint(normal, mirrorWorldPosition);
    mirrorPlane.applyMatrix4(mirrorCamera.matrixWorldInverse);

    clipPlane.set(
      mirrorPlane.normal.x,
      mirrorPlane.normal.y,
      mirrorPlane.normal.z,
      mirrorPlane.constant,
    );

    const projectionMatrix = mirrorCamera.projectionMatrix;

    q.x =
      (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) /
      projectionMatrix.elements[0];
    q.y =
      (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) /
      projectionMatrix.elements[5];
    q.z = -1.0;
    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];

    // Calculate the scaled plane vector
    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q));

    // Replacing the third row of the projection matrix
    projectionMatrix.elements[2] = clipPlane.x;
    projectionMatrix.elements[6] = clipPlane.y;
    projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;
    projectionMatrix.elements[14] = clipPlane.w;

    eye.setFromMatrixPosition(camera.matrixWorld);

    // Render

    const currentRenderTarget = renderer.getRenderTarget();

    const currentXrEnabled = renderer.xr.enabled;
    const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;

    mesh.visible = false;

    renderer.xr.enabled = false; // Avoid camera modification and recursion
    renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows

    renderer.setRenderTarget(renderTarget);

    renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897

    if (renderer.autoClear === false) renderer.clear();
    renderer.render(scene, mirrorCamera);

    mesh.visible = true;

    renderer.xr.enabled = currentXrEnabled;
    renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;

    renderer.setRenderTarget(currentRenderTarget);

    // Restore viewport
    // const viewport = (camera as THREE.PerspectiveCamera).viewport;

    // if (viewport !== undefined) {
    //   renderer.state.viewport(viewport);
    // }
  };

  function animationLoop() {}

  isReady.set(true);
  registerRenderCallback(animationLoop);
</script>
