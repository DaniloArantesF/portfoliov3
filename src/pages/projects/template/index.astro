---
import SceneLayout from 'src/layouts/SceneLayout.astro';

const title = 'Scene Template';
---

<SceneLayout audio />

<script>
  import * as THREE from 'three';
  import BaseScene, { isReady } from '@lib/sceneController';
  import type { BaseSceneState } from '~/lib/types';
  import vertexShader from './shaders/vertex.vs.glsl';
  import fragmentShader from './shaders/fragment.fs.glsl';

  class Scene {
    canvas = document.getElementById('app-view')! as HTMLCanvasElement;
    scene: THREE.Scene;
    camera: THREE.PerspectiveCamera;
    renderer: THREE.WebGLRenderer;
    uniforms: { [key: string]: THREE.IUniform };
    geometry: THREE.SphereGeometry;
    material: THREE.ShaderMaterial;
    mesh: THREE.Mesh;

    constructor() {
      const { state, registerRenderCallback } = BaseScene({
        canvas: this.canvas,
        settings: {
          cameraPosition: [0, 0, 5],
          autoRotate: true,
        },
      });
      this.scene = state.scene;
      this.camera = state.camera;
      this.renderer = state.renderer;
      this.uniforms = state.uniforms;

      this.geometry = new THREE.SphereGeometry(1, 32, 32);
      this.material = new THREE.ShaderMaterial({
        uniforms: this.uniforms,
        vertexShader,
        fragmentShader,
      });

      this.mesh = new THREE.Mesh(this.geometry, this.material);
      this.scene.add(this.mesh);
      registerRenderCallback(this.render);
      isReady.set(true);
    }

    render = (state: BaseSceneState) => {
      this.mesh.position.y = Math.sin(state.time * 2) / 2;
    };
  }

  const scene = new Scene();
</script>
